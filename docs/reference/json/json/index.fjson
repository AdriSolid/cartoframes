{"parents": [], "prev": null, "next": null, "title": "CARTOframes", "meta": {}, "body": "<div class=\"section\" id=\"cartoframes\">\n<h1>CARTOframes<a class=\"headerlink\" href=\"#cartoframes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<a class=\"reference external image-reference\" href=\"https://travis-ci.org/CartoDB/cartoframes\"><img alt=\"https://travis-ci.org/CartoDB/cartoframes.svg?branch=master\" src=\"https://travis-ci.org/CartoDB/cartoframes.svg?branch=master\" /></a>\n<a class=\"reference external image-reference\" href=\"https://coveralls.io/github/CartoDB/cartoframes?branch=master\"><img alt=\"https://coveralls.io/repos/github/CartoDB/cartoframes/badge.svg?branch=master\" src=\"https://coveralls.io/repos/github/CartoDB/cartoframes/badge.svg?branch=master\" /></a>\n<a class=\"reference external image-reference\" href=\"https://mybinder.org/v2/gh/CartoDB/cartoframes/master?filepath=examples\"><img alt=\"https://mybinder.org/badge.svg\" src=\"https://mybinder.org/badge.svg\" /></a>\n<p>A Python package for integrating <a class=\"reference external\" href=\"https://carto.com/\">CARTO</a> maps, analysis, and data services into data science workflows.</p>\n<p>Python data analysis workflows often rely on the de facto standards <a class=\"reference external\" href=\"http://pandas.pydata.org/\">pandas</a> and <a class=\"reference external\" href=\"http://jupyter.org/\">Jupyter notebooks</a>. Integrating CARTO into this workflow saves data scientists time and energy by not having to export datasets as files or retain multiple copies of the data. Instead, CARTOframes give the ability to communicate reproducible analysis while providing the ability to gain from CARTO\u2019s services like hosted, dynamic or static maps and <a class=\"reference external\" href=\"https://carto.com/data-observatory/\">Data Observatory</a> augmentation.</p>\n<div class=\"section\" id=\"features\">\n<h2>Features<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>Write pandas DataFrames to CARTO tables</li>\n<li>Read CARTO tables and queries into pandas DataFrames</li>\n<li>Create customizable, interactive CARTO maps in a Jupyter notebook</li>\n<li>Interact with CARTO\u2019s Data Observatory</li>\n<li>Use CARTO\u2019s spatially-enabled database for analysis</li>\n</ul>\n</div>\n<div class=\"section\" id=\"common-uses\">\n<h2>Common Uses<a class=\"headerlink\" href=\"#common-uses\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>Visualize spatial data programmatically as matplotlib images or embedded interactive maps</li>\n<li>Perform cloud-based spatial data processing using CARTO\u2019s analysis tools</li>\n<li>Extract, transform, and Load (ETL) data using the Python ecosystem for getting data into and out of CARTO</li>\n<li>Data Services integrations using CARTO\u2019s <a class=\"reference external\" href=\"https://carto.com/data-observatory/\">Data Observatory</a> and other <a class=\"reference external\" href=\"https://carto.com/location-data-services/\">Data Services APIs</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"more-info\">\n<h2>More info<a class=\"headerlink\" href=\"#more-info\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>Complete documentation: <a class=\"reference external\" href=\"http://cartoframes.readthedocs.io/en/latest/\">http://cartoframes.readthedocs.io/en/latest/</a></li>\n<li>Source code: <a class=\"reference external\" href=\"https://github.com/CartoDB/cartoframes\">https://github.com/CartoDB/cartoframes</a></li>\n<li>bug tracker / feature requests: <a class=\"reference external\" href=\"https://github.com/CartoDB/cartoframes/issues\">https://github.com/CartoDB/cartoframes/issues</a></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><cite>cartoframes</cite> users must have a CARTO API key for most <cite>cartoframes</cite> functionality. For example, writing DataFrames to an account, reading from private tables, and visualizing data on maps all require an API key. CARTO provides API keys for education and nonprofit uses, among others. Request access at <a class=\"reference external\" href=\"mailto:support&#37;&#52;&#48;carto&#46;com\">support<span>&#64;</span>carto<span>&#46;</span>com</a>. API key access is also given through <a class=\"reference external\" href=\"https://carto.com/blog/carto-is-part-of-the-github-student-pack\">GitHub\u2019s Student Developer Pack</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"install-instructions\">\n<h2>Install Instructions<a class=\"headerlink\" href=\"#install-instructions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To install <cite>cartoframes</cite> on your machine, do the following to install the\nlatest version:</p>\n<div class=\"code bash highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ pip install cartoframes\n</pre></div>\n</div>\n<p><cite>cartoframes</cite> is continuously tested on Python versions 2.7, 3.5, and 3.6. It is recommended to use <cite>cartoframes</cite> in Jupyter Notebooks (<cite>pip install jupyter</cite>). See the example usage section below or notebooks in the <a class=\"reference external\" href=\"https://github.com/CartoDB/cartoframes/tree/master/examples\">examples directory</a> for using <cite>cartoframes</cite> in that environment.</p>\n<div class=\"section\" id=\"virtual-environment\">\n<h3>Virtual Environment<a class=\"headerlink\" href=\"#virtual-environment\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"using-virtualenv\">\n<h4>Using <cite>virtualenv</cite><a class=\"headerlink\" href=\"#using-virtualenv\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Make sure your <cite>virtualenv</cite> package is installed and up-to-date. See the <a class=\"reference external\" href=\"https://packaging.python.org/guides/installing-using-pip-and-virtualenv/\">official Python packaging page</a> for more information.</p>\n<p>To setup <cite>cartoframes</cite> and <cite>Jupyter</cite> in a <a class=\"reference external\" href=\"http://python-guide.readthedocs.io/en/latest/dev/virtualenvs/\">virtual environment</a>:</p>\n<div class=\"code bash highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ virtualenv venv\n$ source venv/bin/activate\n(venv) $ pip install cartoframes jupyter\n(venv) $ jupyter notebook\n</pre></div>\n</div>\n<p>Then create a new notebook and try the example code snippets below with tables that are in your CARTO account.</p>\n</div>\n<div class=\"section\" id=\"using-pipenv\">\n<h4>Using <cite>pipenv</cite><a class=\"headerlink\" href=\"#using-pipenv\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Alternatively, <a class=\"reference external\" href=\"https://pipenv.readthedocs.io/en/latest/\">pipenv</a> provides an easy way to manage virtual environments. The steps below are:</p>\n<ol class=\"arabic simple\">\n<li>Create a virtual environment with Python 3.4+ (recommended instead of Python 2.7)</li>\n<li>Install cartoframes and Jupyter (optional) into the virtual environment</li>\n<li>Enter the virtual environment</li>\n<li>Launch a Jupyter notebook server</li>\n</ol>\n<div class=\"code bash highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ pipenv --three\n$ pipenv install cartoframes jupyter\n$ pipenv shell\n</pre></div>\n</div>\n<p>Next, run a Python kernel by typing <cite>$ python</cite>, <cite>$ jupyter notebook</cite>, or however you typically run Python.</p>\n</div>\n</div>\n<div class=\"section\" id=\"native-pip\">\n<h3>Native pip<a class=\"headerlink\" href=\"#native-pip\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you install packages at a system level, you can install <cite>cartoframes</cite> with:</p>\n<div class=\"code bash highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>$ pip install cartoframes\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"example-usage\">\n<h2>Example usage<a class=\"headerlink\" href=\"#example-usage\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"data-workflow\">\n<h3>Data workflow<a class=\"headerlink\" href=\"#data-workflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Get table from CARTO, make changes in pandas, sync updates with CARTO:</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"c1\"># `base_url`s are of the form `http://{username}.carto.com/` for most users</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://eschbacher.carto.com/&#39;</span><span class=\"p\">,</span>\n                              <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># read a table from your CARTO account to a DataFrame</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">&#39;brooklyn_poverty_census_tracts&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># do fancy pandas operations (add/drop columns, change values, etc.)</span>\n<span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;poverty_per_pop&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;poverty_count&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;total_population&#39;</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># updates CARTO table with all changes from this session</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;brooklyn_poverty_census_tracts&#39;</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"https://raw.githubusercontent.com/CartoDB/cartoframes/master/docs/img/read_demo.gif\" src=\"https://raw.githubusercontent.com/CartoDB/cartoframes/master/docs/img/read_demo.gif\" />\n<p>Write an existing pandas DataFrame to CARTO.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span>\n                              <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"map-workflow\">\n<h3>Map workflow<a class=\"headerlink\" href=\"#map-workflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following will embed a CARTO map in a Jupyter notebook, allowing for custom styling of the maps driven by <a class=\"reference external\" href=\"https://github.com/CartoDB/turbo-carto\">TurboCARTO</a> and <a class=\"reference external\" href=\"https://carto.com/blog/introducing-cartocolors\">CARTOColors</a>. See the <a class=\"reference external\" href=\"https://github.com/CartoDB/CartoColor/wiki/CARTOColor-Scheme-Names\">CARTOColors wiki</a> for a full list of available color schemes.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span><span class=\"p\">,</span> <span class=\"n\">BaseMap</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span>\n                              <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">BaseMap</span><span class=\"p\">(</span><span class=\"s1\">&#39;light&#39;</span><span class=\"p\">),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">tealRose</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)}),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;peregrine_falcon_nest_sites&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bird_id&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">vivid</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)})],</span>\n       <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"https://raw.githubusercontent.com/CartoDB/cartoframes/master/docs/img/map_demo.gif\" src=\"https://raw.githubusercontent.com/CartoDB/cartoframes/master/docs/img/map_demo.gif\" />\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Legends are under active development. See\n<a class=\"reference external\" href=\"https://github.com/CartoDB/cartoframes/pull/184\">https://github.com/CartoDB/cartoframes/pull/184</a> for more information. To\ntry out that code, install <cite>cartoframes</cite> as:</p>\n<blockquote class=\"last\">\n<div><cite>pip install git+https://github.com/cartodb/cartoframes.git&#64;add-legends-v1#egg=cartoframes</cite></div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"data-observatory\">\n<h3>Data Observatory<a class=\"headerlink\" href=\"#data-observatory\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Interact with CARTO\u2019s <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/data\">Data Observatory</a>:</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># total pop, high school diploma (normalized), median income, poverty status (normalized)</span>\n<span class=\"c1\"># See Data Observatory catalog for codes: https://cartodb.github.io/bigmetadata/index.html</span>\n<span class=\"n\">data_obs_measures</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B01003001&#39;</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B15003017&#39;</span><span class=\"p\">,</span>\n                      <span class=\"s1\">&#39;normalization&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;predenominated&#39;</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B19013001&#39;</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B17001002&#39;</span><span class=\"p\">,</span>\n                      <span class=\"s1\">&#39;normalization&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;predenominated&#39;</span><span class=\"p\">},]</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s1\">&#39;transactions&#39;</span><span class=\"p\">,</span> <span class=\"n\">data_obs_measures</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"carto-credential-management\">\n<h3>CARTO Credential Management<a class=\"headerlink\" href=\"#carto-credential-management\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"typical-usage\">\n<h4>Typical usage<a class=\"headerlink\" href=\"#typical-usage\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The most common way to input credentials into cartoframes is through the <cite>CartoContext</cite>, as below. Replace <cite>{your_user_name}</cite> with your CARTO username and <cite>{your_api_key}</cite> with your API key, which you can find at <code class=\"docutils literal notranslate\"><span class=\"pre\">http://{your_user_name}.carto.com/your_apps</span></code>.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">CartoContext</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span>\n    <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://</span><span class=\"si\">{your_user_name}</span><span class=\"s1\">.carto.com&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">{your_api_key}</span><span class=\"s1\">&#39;</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can also set your credentials using the <cite>Credentials</cite> class:</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span><span class=\"p\">,</span> <span class=\"n\">CartoContext</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span>\n    <span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">{your_api_key}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">{your_user_name}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"save-update-credentials-for-later-use\">\n<h4>Save/update credentials for later use<a class=\"headerlink\" href=\"#save-update-credentials-for-later-use\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span><span class=\"p\">,</span> <span class=\"n\">CartoContext</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;eschbacher&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># save credentials for later use (not dependent on Python session)</span>\n</pre></div>\n</div>\n<p>Once you save your credentials, you can get started in future sessions more quickly:</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">CartoContext</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">()</span>  <span class=\"c1\"># automatically loads credentials if previously saved</span>\n</pre></div>\n</div>\n<div class=\"toctree-wrapper compound\">\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"cartoframes-functionality\">\n<h1>CARTOframes Functionality<a class=\"headerlink\" href=\"#cartoframes-functionality\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"cartocontext\">\n<h2>CartoContext<a class=\"headerlink\" href=\"#cartocontext\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.context.</code><code class=\"descname\">CartoContext</code><span class=\"sig-paren\">(</span><em>base_url=None</em>, <em>api_key=None</em>, <em>creds=None</em>, <em>session=None</em>, <em>verbose=0</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CartoContext class for authentication with CARTO and high-level\noperations such as reading tables from CARTO into dataframes, writing\ndataframes to CARTO tables, creating custom maps from dataframes and CARTO\ntables, and augmenting data using CARTO\u2019s <a class=\"reference external\" href=\"https://carto.com/data-observatory\">Data Observatory</a>. Future methods will interact with\nCARTO\u2019s services like <a class=\"reference external\" href=\"https://carto.com/location-data-services/\">routing, geocoding, and isolines</a>, PostGIS backend for spatial\nprocessing, and much more.</p>\n<p>Manages connections with CARTO for data and map operations. Modeled\nafter <a class=\"reference external\" href=\"http://spark.apache.org/docs/2.1.0/api/python/pyspark.html#pyspark.SparkContext\">SparkContext</a>.</p>\n<p>There are two ways of authenticating against a CARTO account:</p>\n<blockquote>\n<div><ol class=\"arabic\">\n<li><p class=\"first\">Setting the <cite>base_url</cite> and <cite>api_key</cite> directly in <cite>CartoContext</cite>. This\nmethod is easier.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span>\n    <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://eschbacher.carto.com&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">By passing a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> instance in <cite>CartoContext</cite>\u2019s <cite>creds</cite>\nkeyword argument. This method is more flexible.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">&#39;eschbacher&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div></blockquote>\n<dl class=\"attribute\">\n<dt id=\"cartoframes.context.CartoContext.creds\">\n<code class=\"descname\">creds</code><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.creds\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> \u2013 <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> instance</p>\n</dd></dl>\n\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>base_url</strong> (<em>str</em>) \u2013 Base URL of CARTO user account. Cloud-based accounts\nshould use the form <code class=\"docutils literal notranslate\"><span class=\"pre\">https://{username}.carto.com</span></code> (e.g.,\n<a class=\"reference external\" href=\"https://eschbacher.carto.com\">https://eschbacher.carto.com</a> for user <code class=\"docutils literal notranslate\"><span class=\"pre\">eschbacher</span></code>) whether on\na personal or multi-user account. On-premises installation users\nshould ask their admin.</li>\n<li><strong>api_key</strong> (<em>str</em>) \u2013 CARTO API key.</li>\n<li><strong>creds</strong> (<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code>) \u2013 A <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> instance can be used\nin place of a <cite>base_url</cite>/<cite>api_key</cite> combination.</li>\n<li><strong>session</strong> (<em>requests.Session</em><em>, </em><em>optional</em>) \u2013 requests session. See <a class=\"reference external\" href=\"http://docs.python-requests.org/en/master/user/advanced/\">requests\ndocumentation</a>\nfor more information.</li>\n<li><strong>verbose</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Output underlying process states (True), or\nsuppress (False, default)</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">A CartoContext object that is authenticated\nagainst the user\u2019s CARTO account.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\"><a class=\"reference internal\" href=\"cartoframes.context/#cartoframes.context.CartoContext\" title=\"cartoframes.context.CartoContext\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CartoContext</span></code></a></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<p>Create a CartoContext object:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.write\">\n<code class=\"descname\">write</code><span class=\"sig-paren\">(</span><em>df</em>, <em>table_name</em>, <em>temp_dir=SYSTEM_TMP_PATH</em>, <em>overwrite=False</em>, <em>lnglat=None</em>, <em>encode_geom=False</em>, <em>geom_col=None</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.write\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write a DataFrame to a CARTO table.</p>\n<p class=\"rubric\">Examples</p>\n<p>Write a pandas DataFrame to CARTO.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;brooklyn_poverty&#39;</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Scrape an HTML table from Wikipedia and send to CARTO with content\nguessing to create a geometry from the country column. This uses\na CARTO Import API param <cite>content_guessing</cite> parameter.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://en.wikipedia.org/wiki/List_of_countries_by_life_expectancy&#39;</span>\n<span class=\"c1\"># retrieve first HTML table from that page</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_html</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># send to carto, let it guess polygons based on the &#39;country&#39;</span>\n<span class=\"c1\">#   column. Also set privacy to &#39;public&#39;</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;life_expectancy&#39;</span><span class=\"p\">,</span>\n         <span class=\"n\">content_guessing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n         <span class=\"n\">privacy</span><span class=\"o\">=</span><span class=\"s1\">&#39;public&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;life_expectancy&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;both_sexes_life_expectancy&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>df</strong> (<em>pandas.DataFrame</em>) \u2013 DataFrame to write to <code class=\"docutils literal notranslate\"><span class=\"pre\">table_name</span></code> in user\nCARTO account</li>\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Table to write <code class=\"docutils literal notranslate\"><span class=\"pre\">df</span></code> to in CARTO.</li>\n<li><strong>temp_dir</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Directory for temporary storage of data\nthat is sent to CARTO. Defaults are defined by <a class=\"reference external\" href=\"https://github.com/ActiveState/appdirs/blob/master/README.rst\">appdirs</a>.</li>\n<li><strong>overwrite</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Behavior for overwriting <code class=\"docutils literal notranslate\"><span class=\"pre\">table_name</span></code>\nif it exits on CARTO. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n<li><strong>lnglat</strong> (<em>tuple</em><em>, </em><em>optional</em>) \u2013 lng/lat pair that can be used for\ncreating a geometry on CARTO. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. In some\ncases, geometry will be created without specifying this. See\nCARTO\u2019s <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/import-api/standard-tables\">Import API</a>\nfor more information.</li>\n<li><strong>encode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Whether to write <cite>geom_col</cite> to CARTO\nas <cite>the_geom</cite>.</li>\n<li><strong>geom_col</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 The name of the column where geometry\ninformation is stored. Used in conjunction with <cite>encode_geom</cite>.</li>\n<li><strong>**kwargs</strong> \u2013 <p>Keyword arguments to control write operations. Options\nare:</p>\n<ul>\n<li><cite>compression</cite> to set compression for files sent to CARTO.\nThis will cause write speedups depending on the dataset.\nOptions are <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (no compression, default) or <code class=\"docutils literal notranslate\"><span class=\"pre\">gzip</span></code>.</li>\n<li>Some arguments from CARTO\u2019s Import API. See the <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/import-api/standard-tables/#params\">params\nlisted in the documentation</a>\nfor more information. For example, when using\n<cite>content_guessing=\u2019true\u2019</cite>, a column named \u2018countries\u2019 with\ncountry names will be used to generate polygons for each\ncountry. Another use is setting the privacy of a dataset. To\navoid unintended consequences, avoid <cite>file</cite>, <cite>url</cite>, and other\nsimilar arguments.</li>\n</ul>\n</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">If <cite>lnglat</cite> flag is set and the\nDataFrame has more than 100,000 rows, a <a class=\"reference internal\" href=\"cartoframes.context/#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a>\ninstance is returned. Otherwise, None.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\"><a class=\"reference internal\" href=\"cartoframes.context/#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a> or None</p>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">DataFrame indexes are changed to ordinary columns. CARTO creates\nan index called <cite>cartodb_id</cite> for every table that runs from 1 to\nthe length of the DataFrame.</p>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">read</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>limit=None</em>, <em>index='cartodb_id'</em>, <em>decode_geom=False</em>, <em>shared_user=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Read a table from CARTO into a pandas DataFrames.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Name of table in user\u2019s CARTO account.</li>\n<li><strong>limit</strong> (<em>int</em><em>, </em><em>optional</em>) \u2013 Read only <cite>limit</cite> lines from\n<cite>table_name</cite>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, which reads the full table.</li>\n<li><strong>index</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Not currently in use.</li>\n<li><strong>decode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Decodes CARTO\u2019s geometries into a\n<a class=\"reference external\" href=\"https://github.com/Toblerity/Shapely\">Shapely</a>\nobject that can be used, for example, in <a class=\"reference external\" href=\"http://geopandas.org/\">GeoPandas</a>.</li>\n<li><strong>shared_user</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If a table has been shared with you,\nspecify the user name (schema) who shared it.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">DataFrame representation of <cite>table_name</cite> from\nCARTO.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">pandas.DataFrame</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">delete</code><span class=\"sig-paren\">(</span><em>table_name</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Delete a table in user\u2019s CARTO account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>table_name</strong> (<em>str</em>) \u2013 Name of table to delete</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">None</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">query</code><span class=\"sig-paren\">(</span><em>query</em>, <em>table_name=None</em>, <em>decode_geom=False</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Pull the result from an arbitrary SQL query from a CARTO account\ninto a pandas DataFrame. Can also be used to perform database\noperations (creating/dropping tables, adding columns, updates, etc.).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>query</strong> (<em>str</em>) \u2013 Query to run against CARTO user database. This data\nwill then be converted into a pandas DataFrame.</li>\n<li><strong>table_name</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If set, this will create a new\ntable in the user\u2019s CARTO account that is the result of the\nquery. Defaults to None (no table created).</li>\n<li><strong>decode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Decodes CARTO\u2019s geometries into a\n<a class=\"reference external\" href=\"https://github.com/Toblerity/Shapely\">Shapely</a>\nobject that can be used, for example, in <a class=\"reference external\" href=\"http://geopandas.org/\">GeoPandas</a>.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">DataFrame representation of query supplied.\nPandas data types are inferred from PostgreSQL data types.\nIn the case of PostgreSQL date types, dates are attempted to be\nconverted, but on failure a data type \u2018object\u2019 is used.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">pandas.DataFrame</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">map</code><span class=\"sig-paren\">(</span><em>layers=None</em>, <em>interactive=True</em>, <em>zoom=None</em>, <em>lat=None</em>, <em>lng=None</em>, <em>size=(800</em>, <em>400)</em>, <em>ax=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Produce a CARTO map visualizing data layers.</p>\n<p class=\"rubric\">Examples</p>\n<p>Create a map with two data layers, and one BaseMap layer:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span><span class=\"p\">,</span> <span class=\"n\">BaseMap</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">BaseMap</span><span class=\"p\">(),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">tealRose</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)}),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;peregrine_falcon_nest_sites&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bird_id&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">vivid</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))],</span>\n       <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Create a snapshot of a map at a specific zoom and center:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">),</span>\n       <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n       <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">,</span>\n       <span class=\"n\">lng</span><span class=\"o\">=-</span><span class=\"mf\">68.3823549</span><span class=\"p\">,</span>\n       <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mf\">44.3036906</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>layers</strong> (<em>list</em><em>, </em><em>optional</em>) \u2013 <p>List of one or more of the following:</p>\n<ul>\n<li>Layer: cartoframes Layer object for visualizing data from a\nCARTO table. See <a class=\"reference external\" href=\"#layer.Layer\">layer.Layer</a> for all\nstyling options.</li>\n<li>BaseMap: Basemap for contextualizng data layers. See\n<a class=\"reference external\" href=\"#layer.BaseMap\">layer.BaseMap</a> for all styling options.</li>\n<li>QueryLayer: Layer from an arbitrary query. See\n<a class=\"reference external\" href=\"#layer.QueryLayer\">layer.QueryLayer</a> for all styling\noptions.</li>\n</ul>\n</li>\n<li><strong>interactive</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to show an\ninteractive slippy map. Setting to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> creates a static\nmap.</li>\n<li><strong>zoom</strong> (<em>int</em><em>, </em><em>optional</em>) \u2013 Zoom level of map. Acceptable values are\nusually in the range 0 to 19. 0 has the entire earth on a\nsingle tile (256px square). Zoom 19 is the size of a city\nblock. Must be used in conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">lng</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lat</span></code>.\nDefaults to a view to have all data layers in view.</li>\n<li><strong>lat</strong> (<em>float</em><em>, </em><em>optional</em>) \u2013 Latitude value for the center of the map.\nMust be used in conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">zoom</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lng</span></code>. Defaults\nto a view to have all data layers in view.</li>\n<li><strong>lng</strong> (<em>float</em><em>, </em><em>optional</em>) \u2013 Longitude value for the center of the map.\nMust be used in conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">zoom</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lat</span></code>. Defaults\nto a view to have all data layers in view.</li>\n<li><strong>size</strong> (<em>tuple</em><em>, </em><em>optional</em>) \u2013 List of pixel dimensions for the map.\nFormat is <code class=\"docutils literal notranslate\"><span class=\"pre\">(width,</span> <span class=\"pre\">height)</span></code>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">(800,</span> <span class=\"pre\">400)</span></code>.</li>\n<li><strong>ax</strong> \u2013 matplotlib axis on which to draw the image. Only used when\n<code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">Interactive maps are\nrendered as HTML in an <cite>iframe</cite>, while static maps are returned as\nmatplotlib Axes objects or IPython Image.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">IPython.display.HTML or matplotlib Axes</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">data_boundaries</code><span class=\"sig-paren\">(</span><em>boundary=None</em>, <em>region=None</em>, <em>decode_geom=False</em>, <em>timespan=None</em>, <em>include_nonclipped=False</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Find all boundaries available for the world or a <cite>region</cite>. If\n<cite>boundary</cite> is specified, get all available boundary polygons for the\nregion specified (if any). This method is espeically useful for getting\nboundaries for a region and, with <cite>CartoContext.data</cite> and\n<cite>CartoContext.data_discovery</cite>, getting tables of geometries and the\ncorresponding raw measures. For example, if you want to analyze\nhow median income has changed in a region (see examples section for\nmore).</p>\n<p class=\"rubric\">Examples</p>\n<p>Find all boundaries available for Australia. The columns\n<cite>geom_name</cite> gives us the name of the boundary and <cite>geom_id</cite>\nis what we need for the <cite>boundary</cite> argument.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"s1\">&#39;base url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;api key&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">au_boundaries</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_boundaries</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">&#39;Australia&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">au_boundaries</span><span class=\"p\">[[</span><span class=\"s1\">&#39;geom_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;geom_id&#39;</span><span class=\"p\">]]</span>\n</pre></div>\n</div>\n<p>Get the boundaries for Australian Postal Areas and map them.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">au_postal_areas</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_boundaries</span><span class=\"p\">(</span><span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;au.geo.POA&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">au_postal_areas</span><span class=\"p\">,</span> <span class=\"s1\">&#39;au_postal_areas&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;au_postal_areas&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Get census tracts around Idaho Falls, Idaho, USA, and add median\nincome from the US census. Without limiting the metadata, we get\nmedian income measures for each census in the Data Observatory.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"s1\">&#39;base url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;api key&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># will return DataFrame with columns `the_geom` and `geom_ref`</span>\n<span class=\"n\">tracts</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_boundaries</span><span class=\"p\">(</span>\n    <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.census_tract&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">112.096642</span><span class=\"p\">,</span><span class=\"mf\">43.429932</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">111.974213</span><span class=\"p\">,</span><span class=\"mf\">43.553539</span><span class=\"p\">])</span>\n<span class=\"c1\"># write geometries to a CARTO table</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">tracts</span><span class=\"p\">,</span> <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># gather metadata needed to look up median income</span>\n<span class=\"n\">median_income_meta</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_discovery</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"s1\">&#39;median income&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">boundaries</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.census_tract&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># get median income data and original table as new dataframe</span>\n<span class=\"n\">idaho_falls_income</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">median_income_meta</span><span class=\"p\">,</span>\n    <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;geom_refs&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># overwrite existing table with newly-enriched dataframe</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">idaho_falls_income</span><span class=\"p\">,</span>\n         <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">,</span>\n         <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>boundary</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Boundary identifier for the boundaries\nthat are of interest. For example, US census tracts have a\nboundary ID of <code class=\"docutils literal notranslate\"><span class=\"pre\">us.census.tiger.census_tract</span></code>, and Brazilian\nMunicipios have an ID of <code class=\"docutils literal notranslate\"><span class=\"pre\">br.geo.municipios</span></code>. Find IDs by\nrunning <cite>CartoContext.data_boundaries</cite> without any arguments,\nor by looking in the <a class=\"reference external\" href=\"http://cartodb.github.io/bigmetadata/\">Data Observatory catalog</a>.</li>\n<li><strong>region</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 <p>Region where boundary information or,\nif <cite>boundary</cite> is specified, boundary polygons are of interest.\n<cite>region</cite> can be one of the following:</p>\n<blockquote>\n<div><ul>\n<li>table name (str): Name of a table in user\u2019s CARTO account</li>\n<li>bounding box (list of float): List of four values (two\nlng/lat pairs) in the following order: western longitude,\nsouthern latitude, eastern longitude, and northern latitude.\nFor example, Switzerland fits in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">[5.9559111595,45.8179931641,10.4920501709,47.808380127]</span></code></li>\n</ul>\n</div></blockquote>\n</li>\n<li><strong>timespan</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Specific timespan to get geometries from.\nDefaults to use the most recent. See the Data Observatory catalog\nfor more information.</li>\n<li><strong>decode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Whether to return the geometries as\nShapely objects or keep them encoded as EWKB strings. Defaults\nto False.</li>\n<li><strong>include_nonclipped</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Optionally include\nnon-shoreline-clipped boundaries. These boundaries are the raw\nboundaries provided by, for example, US Census Tiger.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">If <cite>boundary</cite> is specified, then all available\nboundaries and accompanying <cite>geom_refs</cite> in <cite>region</cite> (or the world\nif <cite>region</cite> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> or not specified) are returned. If\n<cite>boundary</cite> is not specified, then a DataFrame of all available\nboundaries in <cite>region</cite> (or the world if <cite>region</cite> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>)</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">pandas.DataFrame</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">data_discovery</code><span class=\"sig-paren\">(</span><em>region</em>, <em>keywords=None</em>, <em>regex=None</em>, <em>time=None</em>, <em>boundaries=None</em>, <em>include_quantiles=False</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Discover Data Observatory measures. This method returns the full\nData Observatory metadata model for each measure or measures that\nmatch the conditions from the inputs. The full metadata in each row\nuniquely defines a measure based on the timespan, geographic\nresolution, and normalization (if any). Read more about the metadata\nresponse in <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/data/measures-functions/#obs_getmetaextent-geometry-metadata-json-max_timespan_rank-max_score_rank-target_geoms\">Data Observatory</a>\ndocumentation.</p>\n<p>Internally, this method finds all measures in <cite>region</cite> that match the\nconditions set in <cite>keywords</cite>, <cite>regex</cite>, <cite>time</cite>, and <cite>boundaries</cite> (if\nany of them are specified). Then, if <cite>boundaries</cite> is not specified, a\ngeographical resolution for that measure will be chosen subject to the\ntype of region specified:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>If <cite>region</cite> is a table name, then a geographical resolution that\nis roughly equal to <cite>region size / number of subunits</cite>.</li>\n<li>If <cite>region</cite> is a country name or bounding box, then a geographical\nresolution will be chosen roughly equal to <cite>region size / 500</cite>.</li>\n</ol>\n</div></blockquote>\n<p>Since different measures are in some geographic resolutions and not\nothers, different geographical resolutions for different measures are\noftentimes returned.</p>\n<div class=\"admonition tip\">\n<p class=\"first admonition-title\">Tip</p>\n<p class=\"last\">To remove the guesswork in how geographical resolutions are\nselected, specify one or more boundaries in <cite>boundaries</cite>. See\nthe boundaries section for each region in the <a class=\"reference external\" href=\"http://cartodb.github.io/bigmetadata/\">Data Observatory\ncatalog</a>.</p>\n</div>\n<p>The metadata returned from this method can then be used to create raw\ntables or for augmenting an existing table from these measures using\n<cite>CartoContext.data</cite>. For the full Data Observatory catalog, visit\n<a class=\"reference external\" href=\"https://cartodb.github.io/bigmetadata/\">https://cartodb.github.io/bigmetadata/</a>. When working with the metadata\nDataFrame returned from this method, be careful to only remove rows not\ncolumns as <a class=\"reference external\" href=\"#context.CartoContext.data\">CartoContext.data</a> generally\nneeds the full metadata.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Narrowing down a discovery query using the <cite>keywords</cite>, <cite>regex</cite>, and\n<cite>time</cite> filters is important for getting a manageable metadata\nset. Besides there being a large number of measures in the DO, a\nmetadata response has acceptable combinations of measures with\ndemonimators (normalization and density), and the same measure from\nother years.</p>\n<p class=\"last\">For example, setting the region to be United States counties with\nno filter values set will result in many thousands of measures.</p>\n</div>\n<p class=\"rubric\">Examples</p>\n<p>Get all European Union measures that mention <code class=\"docutils literal notranslate\"><span class=\"pre\">freight</span></code>.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_discovery</span><span class=\"p\">(</span><span class=\"s1\">&#39;European Union&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"s1\">&#39;freight&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">&#39;2010&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s1\">&#39;numer_name&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>region</strong> (<em>str</em><em> or </em><em>list of float</em>) \u2013 <p>Information about the region of\ninterest. <cite>region</cite> can be one of three types:</p>\n<blockquote>\n<div><ul>\n<li>region name (str): Name of region of interest. Acceptable\nvalues are limited to: \u2018Australia\u2019, \u2018Brazil\u2019, \u2018Canada\u2019,\n\u2018European Union\u2019, \u2018France\u2019, \u2018Mexico\u2019, \u2018Spain\u2019,\n\u2018United Kingdom\u2019, \u2018United States\u2019.</li>\n<li>table name (str): Name of a table in user\u2019s CARTO account\nwith geometries. The region will be the bounding box of\nthe table.<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If a table name is also a valid Data Observatory\nregion name, the Data Observatory name will be chosen\nover the table.</p>\n</div>\n</li>\n<li>bounding box (list of float): List of four values (two\nlng/lat pairs) in the following order: western longitude,\nsouthern latitude, eastern longitude, and northern latitude.\nFor example, Switzerland fits in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">[5.9559111595,45.8179931641,10.4920501709,47.808380127]</span></code></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Geometry levels are generally chosen by subdividing\nthe region into the next smallest administrative unit. To\noverride this behavior, specify the <cite>boundaries</cite> flag. For\nexample, set <cite>boundaries</cite> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'us.census.tiger.census_tract'</span></code> to choose US census\ntracts.</p>\n</div>\n</div></blockquote>\n</li>\n<li><strong>keywords</strong> (<em>str</em><em> or </em><em>list of str</em><em>, </em><em>optional</em>) \u2013 Keyword or list of\nkeywords in measure description or name. Response will be matched\non all keywords listed (boolean <cite>or</cite>).</li>\n<li><strong>regex</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 A regular expression to search the measure\ndescriptions and names. Note that this relies on PostgreSQL\u2019s\ncase insensitive operator <code class=\"docutils literal notranslate\"><span class=\"pre\">~*</span></code>. See <a class=\"reference external\" href=\"https://www.postgresql.org/docs/9.5/static/functions-matching.html\">PostgreSQL docs</a>\nfor more information.</li>\n<li><strong>boundaries</strong> (<em>str</em><em> or </em><em>list of str</em><em>, </em><em>optional</em>) \u2013 Boundary or list of\nboundaries that specify the measure resolution. See the\nboundaries section for each region in the <a class=\"reference external\" href=\"http://cartodb.github.io/bigmetadata/\">Data Observatory\ncatalog</a>.</li>\n<li><strong>include_quantiles</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Include quantiles calculations\nwhich are a calculation of how a measure compares to all measures\nin the full dataset. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>,\nquantiles columns will be returned for each column which has it\npre-calculated.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">A dataframe of the complete metadata model for\nspecific measures based on the search parameters.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first\">pandas.DataFrame</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> \u2013 If <cite>region</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">list</span></code> and does not consist of\nfour elements, or if <cite>region</cite> is not an acceptable region</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CartoException</span></code> \u2013 If <cite>region</cite> is not a table in user account</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">data</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>metadata</em>, <em>persist_as=None</em>, <em>how='the_geom'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Get an augmented CARTO dataset with <a class=\"reference external\" href=\"https://carto.com/data-observatory\">Data Observatory</a> measures. Use\n<a class=\"reference external\" href=\"#context.CartoContext.data_discovery\">CartoContext.data_discovery</a> to search for available\nmeasures, or see the full <a class=\"reference external\" href=\"https://cartodb.github.io/bigmetadata/index.html\">Data Observatory catalog</a>. Optionally\npersist the data as a new table.</p>\n<p class=\"rubric\">Example</p>\n<p>Get a DataFrame with Data Observatory measures based on the\ngeometries in a CARTO table.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">median_income</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_discovery</span><span class=\"p\">(</span><span class=\"s1\">&#39;transaction_events&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s1\">&#39;.*median income.*&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">&#39;2011 - 2015&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s1\">&#39;transaction_events&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">median_income</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Pass in cherry-picked measures from the Data Observatory catalog.\nThe rest of the metadata will be filled in, but it\u2019s important to\nspecify the geographic level as this will not show up in the column\nname.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">median_income</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B19013001&#39;</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;geom_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.tiger.block_group&#39;</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;numer_timespan&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2011 - 2015&#39;</span><span class=\"p\">}]</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s1\">&#39;transaction_events&#39;</span><span class=\"p\">,</span> <span class=\"n\">median_income</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Name of table on CARTO account that Data\nObservatory measures are to be added to.</li>\n<li><strong>metadata</strong> (<em>pandas.DataFrame</em>) \u2013 List of all measures to add to\n<cite>table_name</cite>. See <cite>CartoContext.data_discovery</cite> outputs\nfor a full list of metadata columns.</li>\n<li><strong>persist_as</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Output the results of augmenting\n<cite>table_name</cite> to <cite>persist_as</cite> as a persistent table on CARTO.\nDefaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, which will not create a table.</li>\n<li><strong>how</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 <strong>Not fully implemented</strong>. Column name for\nidentifying the geometry from which to fetch the data. Defaults\nto <cite>the_geom</cite>, which results in measures that are spatially\ninterpolated (e.g., a neighborhood boundary\u2019s population will\nbe calculated from underlying census tracts). Specifying a\ncolumn that has the geometry identifier (for example, GEOID for\nUS Census boundaries), results in measures directly from the\nCensus for that GEOID but normalized how it is specified in the\nmetadata.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">A DataFrame representation of <cite>table_name</cite> which\nhas new columns for each measure in <cite>metadata</cite>.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first\">pandas.DataFrame</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NameError</span></code> \u2013 If the columns in <cite>table_name</cite> are in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">suggested_name</span></code> column of <cite>metadata</cite>.</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> \u2013 If metadata object is invalid or empty, or if the\nnumber of requested measures exceeds 50.</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CartoException</span></code> \u2013 If user account consumes all of Data Observatory\nquota</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"map-layer-classes\">\n<h2>Map Layer Classes<a class=\"headerlink\" href=\"#map-layer-classes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">BaseMap</code><span class=\"sig-paren\">(</span><em>source='voyager'</em>, <em>labels='back'</em>, <em>only_labels=False</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Layer object for adding basemaps to a cartoframes map.</p>\n<p class=\"rubric\">Example</p>\n<p>Add a custom basemap to a cartoframes map.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">BaseMap</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">BaseMap</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;light&#39;</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"s1\">&#39;front&#39;</span><span class=\"p\">),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">)])</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>source</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 One of <code class=\"docutils literal notranslate\"><span class=\"pre\">light</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">dark</span></code>. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">voyager</span></code>. Basemaps come from\n<a class=\"reference external\" href=\"https://carto.com/location-data-services/basemaps/\">https://carto.com/location-data-services/basemaps/</a></li>\n<li><strong>labels</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 One of <code class=\"docutils literal notranslate\"><span class=\"pre\">back</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">front</span></code>, or None. Labels on\nthe front will be above the data layers. Labels on back will be\nunderneath the data layers but on top of the basemap. Setting\nlabels to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> will only show the basemap.</li>\n<li><strong>only_labels</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Whether to show labels or not.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">Layer</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>source=None</em>, <em>overwrite=False</em>, <em>time=None</em>, <em>color=None</em>, <em>size=None</em>, <em>tooltip=None</em>, <em>legend=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>A cartoframes Data Layer based on a specific table in user\u2019s CARTO\ndatabase. This layer class is used for visualizing individual datasets\nwith <a class=\"reference external\" href=\"#context.CartoContext.map\">CartoContext.map</a>\u2019s <cite>layers</cite>\nkeyword argument.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;fantastic_sql_table&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mr_fox_sightings&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">prism</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)})])</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Name of table in CARTO account</li>\n<li><strong>Styling</strong> \u2013 See <a class=\"reference internal\" href=\"cartoframes.layer/#cartoframes.layer.QueryLayer\" title=\"cartoframes.layer.QueryLayer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QueryLayer</span></code></a> for a full list of all arguments\narguments for styling this map data layer.</li>\n<li><strong>source</strong> (<em>pandas.DataFrame</em><em>, </em><em>optional</em>) \u2013 Not currently implemented</li>\n<li><strong>overwrite</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Not currently implemented</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">QueryLayer</code><span class=\"sig-paren\">(</span><em>query</em>, <em>time=None</em>, <em>color=None</em>, <em>size=None</em>, <em>tooltip=None</em>, <em>legend=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>cartoframes data layer based on an arbitrary query to the user\u2019s CARTO\ndatabase. This layer class is useful for offloading processing to the cloud\nto do some of the following:</p>\n<ul class=\"simple\">\n<li>Visualizing spatial operations using <a class=\"reference external\" href=\"http://postgis.net/\">PostGIS</a>\nand <a class=\"reference external\" href=\"https://www.postgresql.org/\">PostgreSQL</a>, which is the database\nunderlying CARTO</li>\n<li>Performing arbitrary relational database queries (e.g., complex JOINs\nin SQL instead of in pandas)</li>\n<li>Visualizing a subset of the data (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">*</span> <span class=\"pre\">FROM</span> <span class=\"pre\">table</span> <span class=\"pre\">LIMIT</span>\n<span class=\"pre\">1000</span></code>)</li>\n</ul>\n<p>Used in the <cite>layers</cite> keyword in <a class=\"reference external\" href=\"#context.CartoContext.map\">CartoContext.map</a>.</p>\n<p class=\"rubric\">Example</p>\n<p>Underlay a QueryLayer with a complex query below a layer from a table.\nThe QueryLayer is colored by the calculated column <code class=\"docutils literal notranslate\"><span class=\"pre\">abs_diff</span></code>, and\npoints are sized by the column <code class=\"docutils literal notranslate\"><span class=\"pre\">i_measure</span></code>.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">                          WITH i_cte As (</span>\n<span class=\"s1\">                            SELECT</span>\n<span class=\"s1\">                                ST_Buffer(the_geom::geography, 500)::geometry As the_geom,</span>\n<span class=\"s1\">                                cartodb_id,</span>\n<span class=\"s1\">                                measure,</span>\n<span class=\"s1\">                                date</span>\n<span class=\"s1\">                              FROM interesting_data</span>\n<span class=\"s1\">                             WHERE date &gt; &#39;2017-04-19&#39;</span>\n<span class=\"s1\">                          )</span>\n<span class=\"s1\">                          SELECT</span>\n<span class=\"s1\">                             i.cartodb_id, i.the_geom,</span>\n<span class=\"s1\">                             ST_Transform(i.the_geom, 3857) AS the_geom_webmercator,</span>\n<span class=\"s1\">                             abs(i.measure - j.measure) AS abs_diff,</span>\n<span class=\"s1\">                             i.measure AS i_measure</span>\n<span class=\"s1\">                            FROM i_cte AS i</span>\n<span class=\"s1\">                            JOIN awesome_data AS j</span>\n<span class=\"s1\">                              ON i.event_id = j.event_id</span>\n<span class=\"s1\">                           WHERE j.measure IS NOT NULL</span>\n<span class=\"s1\">                             AND j.date &lt; &#39;2017-04-29&#39;</span>\n<span class=\"s1\">                          &#39;&#39;&#39;</span><span class=\"p\">,</span>\n                          <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;abs_diff&#39;</span><span class=\"p\">,</span>\n                                 <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">sunsetDark</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)},</span>\n                          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;i_measure&#39;</span><span class=\"p\">),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;fantastic_sql_table&#39;</span><span class=\"p\">)])</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>query</strong> (<em>str</em>) \u2013 Query to expose data on a map layer. At a minimum, a\nquery needs to have the columns <cite>cartodb_id</cite>, <cite>the_geom</cite>, and\n<cite>the_geom_webmercator</cite> for the map to display. Read more about\nqueries in <a class=\"reference external\" href=\"https://carto.com/docs/tips-and-tricks/geospatial-analysis\">CARTO\u2019s docs</a>.</li>\n<li><strong>time</strong> (<em>dict</em><em> or </em><em>str</em><em>, </em><em>optional</em>) \u2013 <p>Time-based style to apply to layer.</p>\n<p>If <cite>time</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">str</span></code>, it must be the name of a column which\nhas a data type of <cite>datetime</cite> or <cite>float</cite>.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;SELECT * FROM acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">&#39;bird_sighting_time&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>time</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code>, the following keys are options:</p>\n<ul>\n<li>column (<cite>str</cite>, required): Column for animating map, which must\nbe of type <cite>datetime</cite> or <cite>float</cite>.</li>\n<li>method (<cite>str</cite>, optional): Type of aggregation method for\noperating on <a class=\"reference external\" href=\"https://github.com/CartoDB/torque\">Torque TileCubes</a>. Must be one of <code class=\"docutils literal notranslate\"><span class=\"pre\">avg</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sum</span></code>, or another <a class=\"reference external\" href=\"https://www.postgresql.org/docs/9.5/static/functions-aggregate.html\">PostgreSQL aggregate functions</a>\nwith a numeric output. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code>.</li>\n<li>cumulative (<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bool</span></code>, optional): Whether to accumulate points over\ntime (<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>) or not (<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, default)</li>\n<li>frames (<cite>int</cite>, optional): Number of frames in the animation.\nDefaults to 256.</li>\n<li>duration (<cite>int</cite>, optional): Number of seconds in the animation.\nDefaults to 30.</li>\n<li>trails (<cite>int</cite>, optional): Number of trails after the incidence of\na point. Defaults to 2.</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bird_sighting_time&#39;</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;cumulative&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;frames&#39;</span><span class=\"p\">:</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;duration&#39;</span><span class=\"p\">:</span> <span class=\"mi\">15</span>\n          <span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><strong>color</strong> (<em>dict</em><em> or </em><em>str</em><em>, </em><em>optional</em>) \u2013 <p>Color style to apply to map. For\nexample, this can be used to change the color of all geometries\nin this layer, or to create a graduated color or choropleth map.</p>\n<p>If <cite>color</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">str</span></code>, there are two options:</p>\n<ul>\n<li>A column name to style by to create, for example, a choropleth\nmap if working with polygons. The default classification is\n<cite>quantiles</cite> for quantitative data and <cite>category</cite> for\nqualitative data.</li>\n<li>A hex value or <a class=\"reference external\" href=\"https://www.w3.org/TR/css3-color/#svg-color\">web color name</a>.</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># color all geometries red (#F00)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># color on &#39;num_eggs&#39; (using defalt color scheme and quantification)</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>color</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code>, the following keys are options, with\nvalues described:</p>\n<ul>\n<li>column (<cite>str</cite>): Column used for the basis of styling</li>\n<li>scheme (<cite>dict</cite>, optional): Scheme such as <cite>styling.sunset(7)</cite>\nfrom the <a class=\"reference external\" href=\"#module-styling\">styling module</a> of cartoframes that\nexposes <a class=\"reference external\" href=\"https://github.com/CartoDB/CartoColor/wiki/CARTOColor-Scheme-Names\">CARTOColors</a>.\nDefaults to <a class=\"reference external\" href=\"#styling.mint\">mint</a> scheme for quantitative\ndata and <cite>bold</cite> for qualitative data. More control is given by\nusing <a class=\"reference external\" href=\"#styling.scheme\">styling.scheme</a>.<p>If you wish to define a custom scheme outside of CARTOColors, it\nis recommended to use the <a class=\"reference external\" href=\"#styling.custom\">styling.custom</a>\nutility function.</p>\n</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;SELECT * FROM acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                   <span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">,</span>\n                   <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">mint</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">bin_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;equal&#39;</span><span class=\"p\">)</span>\n               <span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><strong>size</strong> (<em>dict</em><em> or </em><em>int</em><em>, </em><em>optional</em>) \u2013 <p>Size style to apply to point data.</p>\n<p>If <cite>size</cite> is an <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">int</span></code>, all points are sized by this value.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;SELECT * FROM acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>size</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">str</span></code>, this value is interpreted as a column,\nand the points are sized by the value in this column. The\nclassification method defaults to <cite>quantiles</cite>, with a min size of\n5, and a max size of 5. Use the <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code> input to override these\nvalues.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>size</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code>, the follow keys are options, with\nvalues described as:</p>\n<ul>\n<li>column (<cite>str</cite>): Column to base sizing of points on</li>\n<li>bin_method (<cite>str</cite>, optional): Quantification method for dividing\ndata range into bins. Must be one of the methods in\n<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BinMethod</span></code> (excluding <cite>category</cite>).</li>\n<li>bins (<cite>int</cite>, optional): Number of bins to break data into.\nDefaults to 5.</li>\n<li>max (<cite>int</cite>, optional): Maximum point width (in pixels). Defaults\nto 25.</li>\n<li>min (<cite>int</cite>, optional): Minimum point width (in pixels). Defaults\nto 5.</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;max&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;min&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n          <span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><strong>tooltip</strong> (<em>tuple</em><em>, </em><em>optional</em>) \u2013 <strong>Not yet implemented.</strong></li>\n<li><strong>legend</strong> \u2013 <strong>Not yet implemented.</strong></li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CartoException</span></code> \u2013 If a column name used in any of the styling options is\nnot in the data source in <cite>query</cite> (or <cite>table</cite> if using <a class=\"reference internal\" href=\"cartoframes.layer/#cartoframes.layer.Layer\" title=\"cartoframes.layer.Layer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a>).</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> \u2013 If styling using a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code> and a <code class=\"docutils literal notranslate\"><span class=\"pre\">column</span></code> key is not\npresent, or if the data type for a styling option is not supported.\nThis is also raised if styling by a geometry column (i.e.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">the_geom</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">the_geom_webmercator</span></code>). Futher, this is raised if\nrequesting a time-based map with a data source that has geometries\nother than points.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"map-styling-functions\">\n<h2>Map Styling Functions<a class=\"headerlink\" href=\"#map-styling-functions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Styling module that exposes CARTOColors schemes. Read more about CARTOColors\nin its <a class=\"reference external\" href=\"https://github.com/Carto-color/\">GitHub repository</a>.</p>\n<a class=\"reference internal image-reference\" href=\"https://cloud.githubusercontent.com/assets/1566273/21021002/fc9df60e-bd33-11e6-9438-d67951a7a9bf.png\"><img alt=\"CARTOColors\" src=\"https://cloud.githubusercontent.com/assets/1566273/21021002/fc9df60e-bd33-11e6-9438-d67951a7a9bf.png\" style=\"width: 700px;\" /></a>\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">BinMethod</code></dt>\n<dd><p>Data classification methods used for the styling of data on maps.</p>\n<dl class=\"attribute\">\n<dt id=\"cartoframes.styling.BinMethod.quantiles\">\n<code class=\"descname\">quantiles</code><a class=\"headerlink\" href=\"#cartoframes.styling.BinMethod.quantiles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>str</em> \u2013 Quantiles classification for quantitative data</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"cartoframes.styling.BinMethod.jenks\">\n<code class=\"descname\">jenks</code><a class=\"headerlink\" href=\"#cartoframes.styling.BinMethod.jenks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>str</em> \u2013 Jenks classification for quantitative data</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"cartoframes.styling.BinMethod.headtails\">\n<code class=\"descname\">headtails</code><a class=\"headerlink\" href=\"#cartoframes.styling.BinMethod.headtails\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>str</em> \u2013 Head/Tails classification for quantitative data</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"cartoframes.styling.BinMethod.equal\">\n<code class=\"descname\">equal</code><a class=\"headerlink\" href=\"#cartoframes.styling.BinMethod.equal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>str</em> \u2013 Equal Interval classification for quantitative data</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"cartoframes.styling.BinMethod.category\">\n<code class=\"descname\">category</code><a class=\"headerlink\" href=\"#cartoframes.styling.BinMethod.category\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>str</em> \u2013 Category classification for qualitative data</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"cartoframes.styling.BinMethod.mapping\">\n<code class=\"descname\">mapping</code><a class=\"headerlink\" href=\"#cartoframes.styling.BinMethod.mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>dict</em> \u2013 The TurboCarto mappings</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">get_scheme_cartocss</code><span class=\"sig-paren\">(</span><em>column</em>, <em>scheme_info</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Get TurboCARTO CartoCSS based on input parameters</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">custom</code><span class=\"sig-paren\">(</span><em>colors</em>, <em>bins=None</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Create a custom scheme.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>colors</strong> (<em>list of str</em>) \u2013 List of hex values for styling data</li>\n<li><strong>bins</strong> (<em>int</em><em>, </em><em>optional</em>) \u2013 Number of bins to style by. If not given, the\nnumber of colors will be used.</li>\n<li><strong>bin_method</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Classification method. One of the values\nin <a class=\"reference internal\" href=\"cartoframes.styling/#cartoframes.styling.BinMethod\" title=\"cartoframes.styling.BinMethod\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BinMethod</span></code></a>. Defaults to <cite>quantiles</cite>, which only works with\nquantitative data.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">scheme</code><span class=\"sig-paren\">(</span><em>name</em>, <em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Return a custom scheme based on CARTOColors.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>name</strong> (<em>str</em>) \u2013 Name of a CARTOColor.</li>\n<li><strong>bins</strong> (<em>int</em><em> or </em><em>iterable</em>) \u2013 If an <cite>int</cite>, the number of bins for classifying\ndata. CARTOColors have 7 bins max for quantitative data, and 11 max\nfor qualitative data. If <cite>bins</cite> is a <cite>list</cite>, it is the upper range\nfor classifying data. E.g., <cite>bins</cite> can be of the form <code class=\"docutils literal notranslate\"><span class=\"pre\">(10,</span> <span class=\"pre\">20,</span> <span class=\"pre\">30,</span>\n<span class=\"pre\">40,</span> <span class=\"pre\">50)</span></code>.</li>\n<li><strong>bin_method</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 One of methods in <a class=\"reference internal\" href=\"cartoframes.styling/#cartoframes.styling.BinMethod\" title=\"cartoframes.styling.BinMethod\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BinMethod</span></code></a>.\nDefaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">quantiles</span></code>. If <cite>bins</cite> is an interable, then that is\nthe bin method that will be used and this will be ignored.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Input types are particularly sensitive in this function, and little\nfeedback is given for errors. <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">bin_method</span></code> arguments\nare case-sensitive.</p>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">burg</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Burg quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">burgYl</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors BurgYl quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">redOr</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors RedOr quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">orYel</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors OrYel quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">peach</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Peach quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">pinkYl</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors PinkYl quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">mint</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Mint quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">bluGrn</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors BluGrn quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">darkMint</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors DarkMint quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">emrld</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Emrld quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">bluYl</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors BluYl quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">teal</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Teal quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">tealGrn</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors TealGrn quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">purp</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Purp quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">purpOr</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors PurpOr quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">sunset</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Sunset quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">magenta</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Magenta quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">sunsetDark</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors SunsetDark quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">brwnYl</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors BrwnYl quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">armyRose</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors ArmyRose divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">fall</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Fall divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">geyser</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Geyser divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">temps</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Temps divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">tealRose</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors TealRose divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">tropic</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Tropic divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">earth</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='quantiles'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Earth divergent quantitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">antique</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='category'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Antique qualitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">bold</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='category'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Bold qualitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">pastel</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='category'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Pastel qualitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">prism</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='category'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Prism qualitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">safe</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='category'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Safe qualitative scheme</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt>\n<code class=\"descclassname\">cartoframes.styling.</code><code class=\"descname\">vivid</code><span class=\"sig-paren\">(</span><em>bins</em>, <em>bin_method='category'</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>CARTOColors Vivid qualitative scheme</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"batchjobstatus\">\n<h2>BatchJobStatus<a class=\"headerlink\" href=\"#batchjobstatus\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.context.</code><code class=\"descname\">BatchJobStatus</code><span class=\"sig-paren\">(</span><em>carto_context</em>, <em>job</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Status of a write or query operation. Read more at <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/sql-api/batch-queries/\">Batch SQL API docs</a> about\nresponses and how to interpret them.</p>\n<p class=\"rubric\">Example</p>\n<p>Poll for a job\u2019s status if you\u2019ve caught the <a class=\"reference internal\" href=\"cartoframes.context/#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a>\ninstance.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new_table&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">lnglat</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;lng_col&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lat_col&#39;</span><span class=\"p\">))</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">curr_status</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">curr_status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;done&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;canceled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unknown&#39;</span><span class=\"p\">,</span> <span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">curr_status</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Create a <a class=\"reference internal\" href=\"cartoframes.context/#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a> instance if you have a <cite>job_id</cite> output\nfrom a <cite>cc.write</cite> operation.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">CartoContext</span><span class=\"p\">,</span> <span class=\"n\">BatchJobStatus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;...&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;...&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new_table&#39;</span><span class=\"p\">,</span> <span class=\"n\">lnglat</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;lng&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lat&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&#39;BatchJobStatus(job_id=&#39;job-id-string&#39;, ...)&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">batch_job</span> <span class=\"o\">=</span> <span class=\"n\">BatchJobStatus</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"s1\">&#39;job-id-string&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt>Attrs:</dt>\n<dd>job_id (str): Job ID of the Batch SQL API job\nlast_status (str): Status of <code class=\"docutils literal notranslate\"><span class=\"pre\">job_id</span></code> job when last polled\ncreated_at (str): Time and date when job was created</dd>\n</dl>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>carto_context</strong> (<em>carto.CartoContext</em>) \u2013 CartoContext instance</li>\n<li><strong>job</strong> (<em>dict</em><em> or </em><em>str</em>) \u2013 If a dict, job status dict returned after sending\na Batch SQL API request. If str, a Batch SQL API job id.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">get_status</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span></dt>\n<dd><p>return current status of job</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">status</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span></dt>\n<dd><p>Checks the current status of job <code class=\"docutils literal notranslate\"><span class=\"pre\">job_id</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">Status and time it was updated</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">dict</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Warns:</th><td class=\"field-body\"><strong>UserWarning</strong> \u2013 If the job failed, a warning is raised with\ninformation about the failure</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"credentials-management\">\n<h2>Credentials Management<a class=\"headerlink\" href=\"#credentials-management\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Credentials management for cartoframes usage.</p>\n<dl class=\"class\">\n<dt>\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.credentials.</code><code class=\"descname\">Credentials</code><span class=\"sig-paren\">(</span><em>creds=None</em>, <em>key=None</em>, <em>username=None</em>, <em>base_url=None</em>, <em>cred_file=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Credentials class for managing and storing user CARTO credentials. The\narguments are listed in order of precedence: <a class=\"reference internal\" href=\"cartoframes.credentials/#cartoframes.credentials.Credentials\" title=\"cartoframes.credentials.Credentials\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code></a> instances\nare first, <cite>key</cite> and <cite>base_url</cite>/<cite>username</cite> are taken next, and\n<cite>config_file</cite> (if given) is taken last. If no arguments are passed, then\nthere will be an attempt to retrieve credentials from a previously saved\nsession. One of the above scenarios needs to be met to successfully\ninstantiate a <a class=\"reference internal\" href=\"cartoframes.credentials/#cartoframes.credentials.Credentials\" title=\"cartoframes.credentials.Credentials\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code></a> object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>creds</strong> (<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cartoframes.Credentials</span></code>, optional) \u2013 Credentials instance</li>\n<li><strong>key</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 API key of user\u2019s CARTO account</li>\n<li><strong>username</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Username of CARTO account</li>\n<li><strong>base_url</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Base URL used for API calls. This is usually\nof the form <cite>https://eschbacher.carto.com/</cite> for user <cite>eschbacher</cite>.\nOn premises installations (and others) have a different URL\npattern.</li>\n<li><strong>cred_file</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Pull credentials from a stored file. If this\nand all other args are not entered, Credentials will attempt to\nload a user config credentials file that was previously set with\nCredentials(\u2026).save().</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><p class=\"first last\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RuntimeError</span></code> \u2013 If not enough credential information is passed and no\nstored credentials file is found, this error will be raised.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span><span class=\"p\">,</span> <span class=\"n\">CartoContext</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;eschbacher&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">base_url</code><span class=\"sig-paren\">(</span><em>base_url=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Return or set <cite>base_url</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>base_url</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If set, updates the <cite>base_url</cite>. Otherwise\nreturns current <cite>base_url</cite>.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This does not update the <cite>username</cite> attribute. Separately update\nthe username with <code class=\"docutils literal notranslate\"><span class=\"pre\">Credentials.username</span></code> or update <cite>base_url</cite> and\n<cite>username</cite> at the same time with <code class=\"docutils literal notranslate\"><span class=\"pre\">Credentials.set</span></code>.</p>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"go\"># load credentials saved in previous session</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">()</span>\n<span class=\"go\"># returns current base_url</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">base_url</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;https://eschbacher.carto.com/&#39;</span>\n<span class=\"go\"># updates base_url with new value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">base_url</span><span class=\"p\">(</span><span class=\"s1\">&#39;new_base_url&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">delete</code><span class=\"sig-paren\">(</span><em>config_file=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Deletes the credentials file specified in <cite>config_file</cite>. If no\nfile is specified, it deletes the default user credential file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>config_file</strong> (<em>str</em>) \u2013 Path to configuration file. Defaults to delete\nthe user default location if <cite>None</cite>.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition tip\">\n<p class=\"first admonition-title\">Tip</p>\n<p>To see if there is a default user credential file stored, do the\nfollowing:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">)</span>\n<span class=\"go\">Credentials(username=eschbacher, key=abcdefg,</span>\n<span class=\"go\">        base_url=https://eschbacher.carto.com/)</span>\n</pre></div>\n</div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">key</code><span class=\"sig-paren\">(</span><em>key=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Return or set API <cite>key</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>key</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If set, updates the API key, otherwise returns\ncurrent API key.</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"go\"># load credentials saved in previous session</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">()</span>\n<span class=\"go\"># returns current API key</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;abcdefg&#39;</span>\n<span class=\"go\"># updates API key with new value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">&#39;new_api_key&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">save</code><span class=\"sig-paren\">(</span><em>config_loc=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Saves current user credentials to user directory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>config_loc</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Location where credentials are to be\nstored. If no argument is provided, it will be send to the\ndefault location.</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;eschbacher&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># save to default location</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">set</code><span class=\"sig-paren\">(</span><em>key=None</em>, <em>username=None</em>, <em>base_url=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Update the credentials of a Credentials instance instead with new\nvalues.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>key</strong> (<em>str</em>) \u2013 API key of user account. Defaults to previous value if\nnot specified.</li>\n<li><strong>username</strong> (<em>str</em>) \u2013 User name of account. This parameter is optional if\n<cite>base_url</cite> is not specified, but defaults to the previous\nvalue if not set.</li>\n<li><strong>base_url</strong> (<em>str</em>) \u2013 Base URL of user account. This parameter is\noptional if <cite>username</cite> is specified and on CARTO\u2019s\ncloud-based account. Generally of the form\n<code class=\"docutils literal notranslate\"><span class=\"pre\">https://your_user_name.carto.com/</span></code> for cloud-based accounts.\nIf on-prem or otherwise, contact your admin.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"c1\"># load credentials saved in previous session</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">()</span>\n<span class=\"c1\"># set new API key</span>\n<span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;new_api_key&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># save new creds to default user config directory</span>\n<span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If the <cite>username</cite> is specified but the <cite>base_url</cite> is not, the\n<cite>base_url</cite> will be updated to <code class=\"docutils literal notranslate\"><span class=\"pre\">https://&lt;username&gt;.carto.com/</span></code>.</p>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt>\n<code class=\"descname\">username</code><span class=\"sig-paren\">(</span><em>username=None</em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Return or set <cite>username</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>username</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If set, updates the <cite>username</cite>. Otherwise\nreturns current <cite>username</cite>.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This does not update the <cite>base_url</cite> attribute. Use\n<cite>Credentials.set</cite> to have that updated with <cite>username</cite>.</p>\n</div>\n<p class=\"rubric\">Example</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"go\"># load credentials saved in previous session</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">()</span>\n<span class=\"go\"># returns current username</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;eschbacher&#39;</span>\n<span class=\"go\"># updates username with new value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">(</span><span class=\"s1\">&#39;new_username&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"indices-and-tables\">\n<h1>Indices and tables<a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"genindex/\"><span class=\"std std-ref\">Index</span></a></li>\n<li><a class=\"reference internal\" href=\"py-modindex/\"><span class=\"std std-ref\">Module Index</span></a></li>\n<li><a class=\"reference internal\" href=\"search/\"><span class=\"std std-ref\">Search Page</span></a></li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Version:</th><td class=\"field-body\">0.6.0</td>\n</tr>\n</tbody>\n</table>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "index.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">CARTOframes</a><ul>\n<li><a class=\"reference internal\" href=\"#features\">Features</a></li>\n<li><a class=\"reference internal\" href=\"#common-uses\">Common Uses</a></li>\n<li><a class=\"reference internal\" href=\"#more-info\">More info</a></li>\n<li><a class=\"reference internal\" href=\"#install-instructions\">Install Instructions</a><ul>\n<li><a class=\"reference internal\" href=\"#virtual-environment\">Virtual Environment</a><ul>\n<li><a class=\"reference internal\" href=\"#using-virtualenv\">Using <cite>virtualenv</cite></a></li>\n<li><a class=\"reference internal\" href=\"#using-pipenv\">Using <cite>pipenv</cite></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#native-pip\">Native pip</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#example-usage\">Example usage</a><ul>\n<li><a class=\"reference internal\" href=\"#data-workflow\">Data workflow</a></li>\n<li><a class=\"reference internal\" href=\"#map-workflow\">Map workflow</a></li>\n<li><a class=\"reference internal\" href=\"#data-observatory\">Data Observatory</a></li>\n<li><a class=\"reference internal\" href=\"#carto-credential-management\">CARTO Credential Management</a><ul>\n<li><a class=\"reference internal\" href=\"#typical-usage\">Typical usage</a></li>\n<li><a class=\"reference internal\" href=\"#save-update-credentials-for-later-use\">Save/update credentials for later use</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cartoframes-functionality\">CARTOframes Functionality</a><ul>\n<li><a class=\"reference internal\" href=\"#cartocontext\">CartoContext</a></li>\n<li><a class=\"reference internal\" href=\"#map-layer-classes\">Map Layer Classes</a></li>\n<li><a class=\"reference internal\" href=\"#map-styling-functions\">Map Styling Functions</a></li>\n<li><a class=\"reference internal\" href=\"#batchjobstatus\">BatchJobStatus</a></li>\n<li><a class=\"reference internal\" href=\"#credentials-management\">Credentials Management</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#indices-and-tables\">Indices and tables</a></li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "index", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.10"}