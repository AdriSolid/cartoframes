{"parents": [], "prev": null, "next": null, "title": "cartoframes.context module", "meta": {}, "body": "<div class=\"section\" id=\"module-cartoframes.context\">\n<span id=\"cartoframes-context-module\"></span><h1>cartoframes.context module<a class=\"headerlink\" href=\"#module-cartoframes.context\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>CartoContext and BatchJobStatus classes</p>\n<dl class=\"class\">\n<dt id=\"cartoframes.context.BatchJobStatus\">\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.context.</code><code class=\"descname\">BatchJobStatus</code><span class=\"sig-paren\">(</span><em>carto_context</em>, <em>job</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.BatchJobStatus\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Status of a write or query operation. Read more at <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/sql-api/batch-queries/\">Batch SQL API docs</a> about\nresponses and how to interpret them.</p>\n<p class=\"rubric\">Example</p>\n<p>Poll for a job\u2019s status if you\u2019ve caught the <a class=\"reference internal\" href=\"#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a>\ninstance.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new_table&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">lnglat</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;lng_col&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lat_col&#39;</span><span class=\"p\">))</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">curr_status</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()[</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">curr_status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;done&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;failed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;canceled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unknown&#39;</span><span class=\"p\">,</span> <span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">curr_status</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Create a <a class=\"reference internal\" href=\"#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a> instance if you have a <cite>job_id</cite> output\nfrom a <cite>cc.write</cite> operation.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">CartoContext</span><span class=\"p\">,</span> <span class=\"n\">BatchJobStatus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;...&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;...&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new_table&#39;</span><span class=\"p\">,</span> <span class=\"n\">lnglat</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;lng&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lat&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&#39;BatchJobStatus(job_id=&#39;job-id-string&#39;, ...)&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">batch_job</span> <span class=\"o\">=</span> <span class=\"n\">BatchJobStatus</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"s1\">&#39;job-id-string&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt>Attrs:</dt>\n<dd>job_id (str): Job ID of the Batch SQL API job\nlast_status (str): Status of <code class=\"docutils literal notranslate\"><span class=\"pre\">job_id</span></code> job when last polled\ncreated_at (str): Time and date when job was created</dd>\n</dl>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>carto_context</strong> (<em>carto.CartoContext</em>) \u2013 CartoContext instance</li>\n<li><strong>job</strong> (<em>dict</em><em> or </em><em>str</em>) \u2013 If a dict, job status dict returned after sending\na Batch SQL API request. If str, a Batch SQL API job id.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"cartoframes.context.BatchJobStatus.get_status\">\n<code class=\"descname\">get_status</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.BatchJobStatus.get_status\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>return current status of job</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.BatchJobStatus.status\">\n<code class=\"descname\">status</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.BatchJobStatus.status\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks the current status of job <code class=\"docutils literal notranslate\"><span class=\"pre\">job_id</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">Status and time it was updated</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">dict</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Warns:</th><td class=\"field-body\"><strong>UserWarning</strong> \u2013 If the job failed, a warning is raised with\ninformation about the failure</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"cartoframes.context.CartoContext\">\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.context.</code><code class=\"descname\">CartoContext</code><span class=\"sig-paren\">(</span><em>base_url=None</em>, <em>api_key=None</em>, <em>creds=None</em>, <em>session=None</em>, <em>verbose=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>CartoContext class for authentication with CARTO and high-level\noperations such as reading tables from CARTO into dataframes, writing\ndataframes to CARTO tables, creating custom maps from dataframes and CARTO\ntables, and augmenting data using CARTO\u2019s <a class=\"reference external\" href=\"https://carto.com/data-observatory\">Data Observatory</a>. Future methods will interact with\nCARTO\u2019s services like <a class=\"reference external\" href=\"https://carto.com/location-data-services/\">routing, geocoding, and isolines</a>, PostGIS backend for spatial\nprocessing, and much more.</p>\n<p>Manages connections with CARTO for data and map operations. Modeled\nafter <a class=\"reference external\" href=\"http://spark.apache.org/docs/2.1.0/api/python/pyspark.html#pyspark.SparkContext\">SparkContext</a>.</p>\n<p>There are two ways of authenticating against a CARTO account:</p>\n<blockquote>\n<div><ol class=\"arabic\">\n<li><p class=\"first\">Setting the <cite>base_url</cite> and <cite>api_key</cite> directly in <cite>CartoContext</cite>. This\nmethod is easier.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span>\n    <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://eschbacher.carto.com&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">By passing a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> instance in <cite>CartoContext</cite>\u2019s <cite>creds</cite>\nkeyword argument. This method is more flexible.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">&#39;eschbacher&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abcdefg&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div></blockquote>\n<dl class=\"attribute\">\n<dt id=\"cartoframes.context.CartoContext.creds\">\n<code class=\"descname\">creds</code><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.creds\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> \u2013 <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> instance</p>\n</dd></dl>\n\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>base_url</strong> (<em>str</em>) \u2013 Base URL of CARTO user account. Cloud-based accounts\nshould use the form <code class=\"docutils literal notranslate\"><span class=\"pre\">https://{username}.carto.com</span></code> (e.g.,\n<a class=\"reference external\" href=\"https://eschbacher.carto.com\">https://eschbacher.carto.com</a> for user <code class=\"docutils literal notranslate\"><span class=\"pre\">eschbacher</span></code>) whether on\na personal or multi-user account. On-premises installation users\nshould ask their admin.</li>\n<li><strong>api_key</strong> (<em>str</em>) \u2013 CARTO API key.</li>\n<li><strong>creds</strong> (<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code>) \u2013 A <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Credentials</span></code> instance can be used\nin place of a <cite>base_url</cite>/<cite>api_key</cite> combination.</li>\n<li><strong>session</strong> (<em>requests.Session</em><em>, </em><em>optional</em>) \u2013 requests session. See <a class=\"reference external\" href=\"http://docs.python-requests.org/en/master/user/advanced/\">requests\ndocumentation</a>\nfor more information.</li>\n<li><strong>verbose</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Output underlying process states (True), or\nsuppress (False, default)</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">A CartoContext object that is authenticated\nagainst the user\u2019s CARTO account.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\"><a class=\"reference internal\" href=\"#cartoframes.context.CartoContext\" title=\"cartoframes.context.CartoContext\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CartoContext</span></code></a></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<p>Create a CartoContext object:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.data\">\n<code class=\"descname\">data</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>metadata</em>, <em>persist_as=None</em>, <em>how='the_geom'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get an augmented CARTO dataset with <a class=\"reference external\" href=\"https://carto.com/data-observatory\">Data Observatory</a> measures. Use\n<a class=\"reference external\" href=\"#context.CartoContext.data_discovery\">CartoContext.data_discovery</a> to search for available\nmeasures, or see the full <a class=\"reference external\" href=\"https://cartodb.github.io/bigmetadata/index.html\">Data Observatory catalog</a>. Optionally\npersist the data as a new table.</p>\n<p class=\"rubric\">Example</p>\n<p>Get a DataFrame with Data Observatory measures based on the\ngeometries in a CARTO table.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">median_income</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_discovery</span><span class=\"p\">(</span><span class=\"s1\">&#39;transaction_events&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s1\">&#39;.*median income.*&#39;</span><span class=\"p\">,</span>\n                                  <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">&#39;2011 - 2015&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s1\">&#39;transaction_events&#39;</span><span class=\"p\">,</span>\n             <span class=\"n\">median_income</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Pass in cherry-picked measures from the Data Observatory catalog.\nThe rest of the metadata will be filled in, but it\u2019s important to\nspecify the geographic level as this will not show up in the column\nname.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">median_income</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B19013001&#39;</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;geom_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.tiger.block_group&#39;</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;numer_timespan&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2011 - 2015&#39;</span><span class=\"p\">}]</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s1\">&#39;transaction_events&#39;</span><span class=\"p\">,</span> <span class=\"n\">median_income</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Name of table on CARTO account that Data\nObservatory measures are to be added to.</li>\n<li><strong>metadata</strong> (<em>pandas.DataFrame</em>) \u2013 List of all measures to add to\n<cite>table_name</cite>. See <cite>CartoContext.data_discovery</cite> outputs\nfor a full list of metadata columns.</li>\n<li><strong>persist_as</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Output the results of augmenting\n<cite>table_name</cite> to <cite>persist_as</cite> as a persistent table on CARTO.\nDefaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, which will not create a table.</li>\n<li><strong>how</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 <strong>Not fully implemented</strong>. Column name for\nidentifying the geometry from which to fetch the data. Defaults\nto <cite>the_geom</cite>, which results in measures that are spatially\ninterpolated (e.g., a neighborhood boundary\u2019s population will\nbe calculated from underlying census tracts). Specifying a\ncolumn that has the geometry identifier (for example, GEOID for\nUS Census boundaries), results in measures directly from the\nCensus for that GEOID but normalized how it is specified in the\nmetadata.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">A DataFrame representation of <cite>table_name</cite> which\nhas new columns for each measure in <cite>metadata</cite>.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first\">pandas.DataFrame</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NameError</span></code> \u2013 If the columns in <cite>table_name</cite> are in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">suggested_name</span></code> column of <cite>metadata</cite>.</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> \u2013 If metadata object is invalid or empty, or if the\nnumber of requested measures exceeds 50.</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CartoException</span></code> \u2013 If user account consumes all of Data Observatory\nquota</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.data_augment\">\n<code class=\"descname\">data_augment</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>metadata</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.data_augment\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DEPRECATED. Use <cite>CartoContext.data</cite> instead</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.data_boundaries\">\n<code class=\"descname\">data_boundaries</code><span class=\"sig-paren\">(</span><em>boundary=None</em>, <em>region=None</em>, <em>decode_geom=False</em>, <em>timespan=None</em>, <em>include_nonclipped=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.data_boundaries\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find all boundaries available for the world or a <cite>region</cite>. If\n<cite>boundary</cite> is specified, get all available boundary polygons for the\nregion specified (if any). This method is espeically useful for getting\nboundaries for a region and, with <cite>CartoContext.data</cite> and\n<cite>CartoContext.data_discovery</cite>, getting tables of geometries and the\ncorresponding raw measures. For example, if you want to analyze\nhow median income has changed in a region (see examples section for\nmore).</p>\n<p class=\"rubric\">Examples</p>\n<p>Find all boundaries available for Australia. The columns\n<cite>geom_name</cite> gives us the name of the boundary and <cite>geom_id</cite>\nis what we need for the <cite>boundary</cite> argument.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"s1\">&#39;base url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;api key&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">au_boundaries</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_boundaries</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">&#39;Australia&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">au_boundaries</span><span class=\"p\">[[</span><span class=\"s1\">&#39;geom_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;geom_id&#39;</span><span class=\"p\">]]</span>\n</pre></div>\n</div>\n<p>Get the boundaries for Australian Postal Areas and map them.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">au_postal_areas</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_boundaries</span><span class=\"p\">(</span><span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;au.geo.POA&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">au_postal_areas</span><span class=\"p\">,</span> <span class=\"s1\">&#39;au_postal_areas&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;au_postal_areas&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Get census tracts around Idaho Falls, Idaho, USA, and add median\nincome from the US census. Without limiting the metadata, we get\nmedian income measures for each census in the Data Observatory.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"s1\">&#39;base url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;api key&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># will return DataFrame with columns `the_geom` and `geom_ref`</span>\n<span class=\"n\">tracts</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_boundaries</span><span class=\"p\">(</span>\n    <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.census_tract&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">112.096642</span><span class=\"p\">,</span><span class=\"mf\">43.429932</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">111.974213</span><span class=\"p\">,</span><span class=\"mf\">43.553539</span><span class=\"p\">])</span>\n<span class=\"c1\"># write geometries to a CARTO table</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">tracts</span><span class=\"p\">,</span> <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># gather metadata needed to look up median income</span>\n<span class=\"n\">median_income_meta</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_discovery</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"s1\">&#39;median income&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">boundaries</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.census_tract&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># get median income data and original table as new dataframe</span>\n<span class=\"n\">idaho_falls_income</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">median_income_meta</span><span class=\"p\">,</span>\n    <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;geom_refs&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># overwrite existing table with newly-enriched dataframe</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">idaho_falls_income</span><span class=\"p\">,</span>\n         <span class=\"s1\">&#39;idaho_falls_tracts&#39;</span><span class=\"p\">,</span>\n         <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>boundary</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Boundary identifier for the boundaries\nthat are of interest. For example, US census tracts have a\nboundary ID of <code class=\"docutils literal notranslate\"><span class=\"pre\">us.census.tiger.census_tract</span></code>, and Brazilian\nMunicipios have an ID of <code class=\"docutils literal notranslate\"><span class=\"pre\">br.geo.municipios</span></code>. Find IDs by\nrunning <cite>CartoContext.data_boundaries</cite> without any arguments,\nor by looking in the <a class=\"reference external\" href=\"http://cartodb.github.io/bigmetadata/\">Data Observatory catalog</a>.</li>\n<li><strong>region</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 <p>Region where boundary information or,\nif <cite>boundary</cite> is specified, boundary polygons are of interest.\n<cite>region</cite> can be one of the following:</p>\n<blockquote>\n<div><ul>\n<li>table name (str): Name of a table in user\u2019s CARTO account</li>\n<li>bounding box (list of float): List of four values (two\nlng/lat pairs) in the following order: western longitude,\nsouthern latitude, eastern longitude, and northern latitude.\nFor example, Switzerland fits in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">[5.9559111595,45.8179931641,10.4920501709,47.808380127]</span></code></li>\n</ul>\n</div></blockquote>\n</li>\n<li><strong>timespan</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Specific timespan to get geometries from.\nDefaults to use the most recent. See the Data Observatory catalog\nfor more information.</li>\n<li><strong>decode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Whether to return the geometries as\nShapely objects or keep them encoded as EWKB strings. Defaults\nto False.</li>\n<li><strong>include_nonclipped</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Optionally include\nnon-shoreline-clipped boundaries. These boundaries are the raw\nboundaries provided by, for example, US Census Tiger.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">If <cite>boundary</cite> is specified, then all available\nboundaries and accompanying <cite>geom_refs</cite> in <cite>region</cite> (or the world\nif <cite>region</cite> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> or not specified) are returned. If\n<cite>boundary</cite> is not specified, then a DataFrame of all available\nboundaries in <cite>region</cite> (or the world if <cite>region</cite> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>)</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">pandas.DataFrame</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.data_discovery\">\n<code class=\"descname\">data_discovery</code><span class=\"sig-paren\">(</span><em>region</em>, <em>keywords=None</em>, <em>regex=None</em>, <em>time=None</em>, <em>boundaries=None</em>, <em>include_quantiles=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.data_discovery\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Discover Data Observatory measures. This method returns the full\nData Observatory metadata model for each measure or measures that\nmatch the conditions from the inputs. The full metadata in each row\nuniquely defines a measure based on the timespan, geographic\nresolution, and normalization (if any). Read more about the metadata\nresponse in <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/data/measures-functions/#obs_getmetaextent-geometry-metadata-json-max_timespan_rank-max_score_rank-target_geoms\">Data Observatory</a>\ndocumentation.</p>\n<p>Internally, this method finds all measures in <cite>region</cite> that match the\nconditions set in <cite>keywords</cite>, <cite>regex</cite>, <cite>time</cite>, and <cite>boundaries</cite> (if\nany of them are specified). Then, if <cite>boundaries</cite> is not specified, a\ngeographical resolution for that measure will be chosen subject to the\ntype of region specified:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>If <cite>region</cite> is a table name, then a geographical resolution that\nis roughly equal to <cite>region size / number of subunits</cite>.</li>\n<li>If <cite>region</cite> is a country name or bounding box, then a geographical\nresolution will be chosen roughly equal to <cite>region size / 500</cite>.</li>\n</ol>\n</div></blockquote>\n<p>Since different measures are in some geographic resolutions and not\nothers, different geographical resolutions for different measures are\noftentimes returned.</p>\n<div class=\"admonition tip\">\n<p class=\"first admonition-title\">Tip</p>\n<p class=\"last\">To remove the guesswork in how geographical resolutions are\nselected, specify one or more boundaries in <cite>boundaries</cite>. See\nthe boundaries section for each region in the <a class=\"reference external\" href=\"http://cartodb.github.io/bigmetadata/\">Data Observatory\ncatalog</a>.</p>\n</div>\n<p>The metadata returned from this method can then be used to create raw\ntables or for augmenting an existing table from these measures using\n<cite>CartoContext.data</cite>. For the full Data Observatory catalog, visit\n<a class=\"reference external\" href=\"https://cartodb.github.io/bigmetadata/\">https://cartodb.github.io/bigmetadata/</a>. When working with the metadata\nDataFrame returned from this method, be careful to only remove rows not\ncolumns as <a class=\"reference external\" href=\"#context.CartoContext.data\">CartoContext.data</a> generally\nneeds the full metadata.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Narrowing down a discovery query using the <cite>keywords</cite>, <cite>regex</cite>, and\n<cite>time</cite> filters is important for getting a manageable metadata\nset. Besides there being a large number of measures in the DO, a\nmetadata response has acceptable combinations of measures with\ndemonimators (normalization and density), and the same measure from\nother years.</p>\n<p class=\"last\">For example, setting the region to be United States counties with\nno filter values set will result in many thousands of measures.</p>\n</div>\n<p class=\"rubric\">Examples</p>\n<p>Get all European Union measures that mention <code class=\"docutils literal notranslate\"><span class=\"pre\">freight</span></code>.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">data_discovery</span><span class=\"p\">(</span><span class=\"s1\">&#39;European Union&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"s1\">&#39;freight&#39;</span><span class=\"p\">,</span>\n                         <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">&#39;2010&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s1\">&#39;numer_name&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>region</strong> (<em>str</em><em> or </em><em>list of float</em>) \u2013 <p>Information about the region of\ninterest. <cite>region</cite> can be one of three types:</p>\n<blockquote>\n<div><ul>\n<li>region name (str): Name of region of interest. Acceptable\nvalues are limited to: \u2018Australia\u2019, \u2018Brazil\u2019, \u2018Canada\u2019,\n\u2018European Union\u2019, \u2018France\u2019, \u2018Mexico\u2019, \u2018Spain\u2019,\n\u2018United Kingdom\u2019, \u2018United States\u2019.</li>\n<li>table name (str): Name of a table in user\u2019s CARTO account\nwith geometries. The region will be the bounding box of\nthe table.<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If a table name is also a valid Data Observatory\nregion name, the Data Observatory name will be chosen\nover the table.</p>\n</div>\n</li>\n<li>bounding box (list of float): List of four values (two\nlng/lat pairs) in the following order: western longitude,\nsouthern latitude, eastern longitude, and northern latitude.\nFor example, Switzerland fits in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">[5.9559111595,45.8179931641,10.4920501709,47.808380127]</span></code></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Geometry levels are generally chosen by subdividing\nthe region into the next smallest administrative unit. To\noverride this behavior, specify the <cite>boundaries</cite> flag. For\nexample, set <cite>boundaries</cite> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'us.census.tiger.census_tract'</span></code> to choose US census\ntracts.</p>\n</div>\n</div></blockquote>\n</li>\n<li><strong>keywords</strong> (<em>str</em><em> or </em><em>list of str</em><em>, </em><em>optional</em>) \u2013 Keyword or list of\nkeywords in measure description or name. Response will be matched\non all keywords listed (boolean <cite>or</cite>).</li>\n<li><strong>regex</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 A regular expression to search the measure\ndescriptions and names. Note that this relies on PostgreSQL\u2019s\ncase insensitive operator <code class=\"docutils literal notranslate\"><span class=\"pre\">~*</span></code>. See <a class=\"reference external\" href=\"https://www.postgresql.org/docs/9.5/static/functions-matching.html\">PostgreSQL docs</a>\nfor more information.</li>\n<li><strong>boundaries</strong> (<em>str</em><em> or </em><em>list of str</em><em>, </em><em>optional</em>) \u2013 Boundary or list of\nboundaries that specify the measure resolution. See the\nboundaries section for each region in the <a class=\"reference external\" href=\"http://cartodb.github.io/bigmetadata/\">Data Observatory\ncatalog</a>.</li>\n<li><strong>include_quantiles</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Include quantiles calculations\nwhich are a calculation of how a measure compares to all measures\nin the full dataset. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>,\nquantiles columns will be returned for each column which has it\npre-calculated.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">A dataframe of the complete metadata model for\nspecific measures based on the search parameters.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first\">pandas.DataFrame</p>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> \u2013 If <cite>region</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">list</span></code> and does not consist of\nfour elements, or if <cite>region</cite> is not an acceptable region</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CartoException</span></code> \u2013 If <cite>region</cite> is not a table in user account</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.delete\">\n<code class=\"descname\">delete</code><span class=\"sig-paren\">(</span><em>table_name</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.delete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Delete a table in user\u2019s CARTO account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>table_name</strong> (<em>str</em>) \u2013 Name of table to delete</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">None</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.map\">\n<code class=\"descname\">map</code><span class=\"sig-paren\">(</span><em>layers=None</em>, <em>interactive=True</em>, <em>zoom=None</em>, <em>lat=None</em>, <em>lng=None</em>, <em>size=(800</em>, <em>400)</em>, <em>ax=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Produce a CARTO map visualizing data layers.</p>\n<p class=\"rubric\">Examples</p>\n<p>Create a map with two data layers, and one BaseMap layer:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span><span class=\"p\">,</span> <span class=\"n\">BaseMap</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">BaseMap</span><span class=\"p\">(),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">tealRose</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)}),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;peregrine_falcon_nest_sites&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bird_id&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">vivid</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))],</span>\n       <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Create a snapshot of a map at a specific zoom and center:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">),</span>\n       <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n       <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">,</span>\n       <span class=\"n\">lng</span><span class=\"o\">=-</span><span class=\"mf\">68.3823549</span><span class=\"p\">,</span>\n       <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mf\">44.3036906</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>layers</strong> (<em>list</em><em>, </em><em>optional</em>) \u2013 <p>List of one or more of the following:</p>\n<ul>\n<li>Layer: cartoframes Layer object for visualizing data from a\nCARTO table. See <a class=\"reference external\" href=\"#layer.Layer\">layer.Layer</a> for all\nstyling options.</li>\n<li>BaseMap: Basemap for contextualizng data layers. See\n<a class=\"reference external\" href=\"#layer.BaseMap\">layer.BaseMap</a> for all styling options.</li>\n<li>QueryLayer: Layer from an arbitrary query. See\n<a class=\"reference external\" href=\"#layer.QueryLayer\">layer.QueryLayer</a> for all styling\noptions.</li>\n</ul>\n</li>\n<li><strong>interactive</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to show an\ninteractive slippy map. Setting to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> creates a static\nmap.</li>\n<li><strong>zoom</strong> (<em>int</em><em>, </em><em>optional</em>) \u2013 Zoom level of map. Acceptable values are\nusually in the range 0 to 19. 0 has the entire earth on a\nsingle tile (256px square). Zoom 19 is the size of a city\nblock. Must be used in conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">lng</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lat</span></code>.\nDefaults to a view to have all data layers in view.</li>\n<li><strong>lat</strong> (<em>float</em><em>, </em><em>optional</em>) \u2013 Latitude value for the center of the map.\nMust be used in conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">zoom</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lng</span></code>. Defaults\nto a view to have all data layers in view.</li>\n<li><strong>lng</strong> (<em>float</em><em>, </em><em>optional</em>) \u2013 Longitude value for the center of the map.\nMust be used in conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">zoom</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lat</span></code>. Defaults\nto a view to have all data layers in view.</li>\n<li><strong>size</strong> (<em>tuple</em><em>, </em><em>optional</em>) \u2013 List of pixel dimensions for the map.\nFormat is <code class=\"docutils literal notranslate\"><span class=\"pre\">(width,</span> <span class=\"pre\">height)</span></code>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">(800,</span> <span class=\"pre\">400)</span></code>.</li>\n<li><strong>ax</strong> \u2013 matplotlib axis on which to draw the image. Only used when\n<code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">Interactive maps are\nrendered as HTML in an <cite>iframe</cite>, while static maps are returned as\nmatplotlib Axes objects or IPython Image.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">IPython.display.HTML or matplotlib Axes</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.query\">\n<code class=\"descname\">query</code><span class=\"sig-paren\">(</span><em>query</em>, <em>table_name=None</em>, <em>decode_geom=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.query\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Pull the result from an arbitrary SQL query from a CARTO account\ninto a pandas DataFrame. Can also be used to perform database\noperations (creating/dropping tables, adding columns, updates, etc.).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>query</strong> (<em>str</em>) \u2013 Query to run against CARTO user database. This data\nwill then be converted into a pandas DataFrame.</li>\n<li><strong>table_name</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If set, this will create a new\ntable in the user\u2019s CARTO account that is the result of the\nquery. Defaults to None (no table created).</li>\n<li><strong>decode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Decodes CARTO\u2019s geometries into a\n<a class=\"reference external\" href=\"https://github.com/Toblerity/Shapely\">Shapely</a>\nobject that can be used, for example, in <a class=\"reference external\" href=\"http://geopandas.org/\">GeoPandas</a>.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">DataFrame representation of query supplied.\nPandas data types are inferred from PostgreSQL data types.\nIn the case of PostgreSQL date types, dates are attempted to be\nconverted, but on failure a data type \u2018object\u2019 is used.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">pandas.DataFrame</p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.read\">\n<code class=\"descname\">read</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>limit=None</em>, <em>index='cartodb_id'</em>, <em>decode_geom=False</em>, <em>shared_user=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read a table from CARTO into a pandas DataFrames.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Name of table in user\u2019s CARTO account.</li>\n<li><strong>limit</strong> (<em>int</em><em>, </em><em>optional</em>) \u2013 Read only <cite>limit</cite> lines from\n<cite>table_name</cite>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, which reads the full table.</li>\n<li><strong>index</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Not currently in use.</li>\n<li><strong>decode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Decodes CARTO\u2019s geometries into a\n<a class=\"reference external\" href=\"https://github.com/Toblerity/Shapely\">Shapely</a>\nobject that can be used, for example, in <a class=\"reference external\" href=\"http://geopandas.org/\">GeoPandas</a>.</li>\n<li><strong>shared_user</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 If a table has been shared with you,\nspecify the user name (schema) who shared it.</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">DataFrame representation of <cite>table_name</cite> from\nCARTO.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\">pandas.DataFrame</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Example</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.sync\">\n<code class=\"descname\">sync</code><span class=\"sig-paren\">(</span><em>dataframe</em>, <em>table_name</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.sync\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Depending on the size of the DataFrame or CARTO table, perform\ngranular operations on a DataFrame to only update the changed cells\ninstead of a bulk upload. If on the large side, perform granular\noperations, if on the smaller side use Import API.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Not yet implemented.</p>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.context.CartoContext.write\">\n<code class=\"descname\">write</code><span class=\"sig-paren\">(</span><em>df</em>, <em>table_name</em>, <em>temp_dir='/Users/aeschbacher/Library/Caches/cartoframes'</em>, <em>overwrite=False</em>, <em>lnglat=None</em>, <em>encode_geom=False</em>, <em>geom_col=None</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.context.CartoContext.write\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write a DataFrame to a CARTO table.</p>\n<p class=\"rubric\">Examples</p>\n<p>Write a pandas DataFrame to CARTO.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;brooklyn_poverty&#39;</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Scrape an HTML table from Wikipedia and send to CARTO with content\nguessing to create a geometry from the country column. This uses\na CARTO Import API param <cite>content_guessing</cite> parameter.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://en.wikipedia.org/wiki/List_of_countries_by_life_expectancy&#39;</span>\n<span class=\"c1\"># retrieve first HTML table from that page</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_html</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># send to carto, let it guess polygons based on the &#39;country&#39;</span>\n<span class=\"c1\">#   column. Also set privacy to &#39;public&#39;</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">&#39;life_expectancy&#39;</span><span class=\"p\">,</span>\n         <span class=\"n\">content_guessing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n         <span class=\"n\">privacy</span><span class=\"o\">=</span><span class=\"s1\">&#39;public&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;life_expectancy&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;both_sexes_life_expectancy&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>df</strong> (<em>pandas.DataFrame</em>) \u2013 DataFrame to write to <code class=\"docutils literal notranslate\"><span class=\"pre\">table_name</span></code> in user\nCARTO account</li>\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Table to write <code class=\"docutils literal notranslate\"><span class=\"pre\">df</span></code> to in CARTO.</li>\n<li><strong>temp_dir</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 Directory for temporary storage of data\nthat is sent to CARTO. Defaults are defined by <a class=\"reference external\" href=\"https://github.com/ActiveState/appdirs/blob/master/README.rst\">appdirs</a>.</li>\n<li><strong>overwrite</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Behavior for overwriting <code class=\"docutils literal notranslate\"><span class=\"pre\">table_name</span></code>\nif it exits on CARTO. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n<li><strong>lnglat</strong> (<em>tuple</em><em>, </em><em>optional</em>) \u2013 lng/lat pair that can be used for\ncreating a geometry on CARTO. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. In some\ncases, geometry will be created without specifying this. See\nCARTO\u2019s <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/import-api/standard-tables\">Import API</a>\nfor more information.</li>\n<li><strong>encode_geom</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Whether to write <cite>geom_col</cite> to CARTO\nas <cite>the_geom</cite>.</li>\n<li><strong>geom_col</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 The name of the column where geometry\ninformation is stored. Used in conjunction with <cite>encode_geom</cite>.</li>\n<li><strong>**kwargs</strong> \u2013 <p>Keyword arguments to control write operations. Options\nare:</p>\n<ul>\n<li><cite>compression</cite> to set compression for files sent to CARTO.\nThis will cause write speedups depending on the dataset.\nOptions are <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (no compression, default) or <code class=\"docutils literal notranslate\"><span class=\"pre\">gzip</span></code>.</li>\n<li>Some arguments from CARTO\u2019s Import API. See the <a class=\"reference external\" href=\"https://carto.com/docs/carto-engine/import-api/standard-tables/#params\">params\nlisted in the documentation</a>\nfor more information. For example, when using\n<cite>content_guessing=\u2019true\u2019</cite>, a column named \u2018countries\u2019 with\ncountry names will be used to generate polygons for each\ncountry. Another use is setting the privacy of a dataset. To\navoid unintended consequences, avoid <cite>file</cite>, <cite>url</cite>, and other\nsimilar arguments.</li>\n</ul>\n</li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first\">If <cite>lnglat</cite> flag is set and the\nDataFrame has more than 100,000 rows, a <a class=\"reference internal\" href=\"#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a>\ninstance is returned. Otherwise, None.</p>\n</td>\n</tr>\n<tr class=\"field-odd field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\"><p class=\"first last\"><a class=\"reference internal\" href=\"#cartoframes.context.BatchJobStatus\" title=\"cartoframes.context.BatchJobStatus\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BatchJobStatus</span></code></a> or None</p>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">DataFrame indexes are changed to ordinary columns. CARTO creates\nan index called <cite>cartodb_id</cite> for every table that runs from 1 to\nthe length of the DataFrame.</p>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "cartoframes.context.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">cartoframes.context module</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "cartoframes.context", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.10"}