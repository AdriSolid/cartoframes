{"parents": [], "prev": null, "next": null, "title": "cartoframes.layer module", "meta": {}, "body": "<div class=\"section\" id=\"module-cartoframes.layer\">\n<span id=\"cartoframes-layer-module\"></span><h1>cartoframes.layer module<a class=\"headerlink\" href=\"#module-cartoframes.layer\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Layer classes for map creation. See examples in <a class=\"reference external\" href=\"#layer.Layer\">layer.Layer</a> and <a class=\"reference external\" href=\"#layer.QueryLayer\">layer.QueryLayer</a>\nfor example usage for data layers. See <a class=\"reference external\" href=\"#layer.BaseMap\">layer.BaseMap</a> for\nbasemap layers.</p>\n<dl class=\"class\">\n<dt id=\"cartoframes.layer.AbstractLayer\">\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">AbstractLayer</code><a class=\"headerlink\" href=\"#cartoframes.layer.AbstractLayer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></p>\n<p>Abstract Layer object</p>\n<dl class=\"attribute\">\n<dt id=\"cartoframes.layer.AbstractLayer.is_basemap\">\n<code class=\"descname\">is_basemap</code><em class=\"property\"> = False</em><a class=\"headerlink\" href=\"#cartoframes.layer.AbstractLayer.is_basemap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"cartoframes.layer.BaseMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">BaseMap</code><span class=\"sig-paren\">(</span><em>source='voyager'</em>, <em>labels='back'</em>, <em>only_labels=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.layer.BaseMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#cartoframes.layer.AbstractLayer\" title=\"cartoframes.layer.AbstractLayer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cartoframes.layer.AbstractLayer</span></code></a></p>\n<p>Layer object for adding basemaps to a cartoframes map.</p>\n<p class=\"rubric\">Example</p>\n<p>Add a custom basemap to a cartoframes map.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">BaseMap</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">BaseMap</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;light&#39;</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"s1\">&#39;front&#39;</span><span class=\"p\">),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">)])</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>source</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 One of <code class=\"docutils literal notranslate\"><span class=\"pre\">light</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">dark</span></code>. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">voyager</span></code>. Basemaps come from\n<a class=\"reference external\" href=\"https://carto.com/location-data-services/basemaps/\">https://carto.com/location-data-services/basemaps/</a></li>\n<li><strong>labels</strong> (<em>str</em><em>, </em><em>optional</em>) \u2013 One of <code class=\"docutils literal notranslate\"><span class=\"pre\">back</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">front</span></code>, or None. Labels on\nthe front will be above the data layers. Labels on back will be\nunderneath the data layers but on top of the basemap. Setting\nlabels to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> will only show the basemap.</li>\n<li><strong>only_labels</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Whether to show labels or not.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"attribute\">\n<dt id=\"cartoframes.layer.BaseMap.is_basemap\">\n<code class=\"descname\">is_basemap</code><em class=\"property\"> = True</em><a class=\"headerlink\" href=\"#cartoframes.layer.BaseMap.is_basemap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"cartoframes.layer.BaseMap.is_basic\">\n<code class=\"descname\">is_basic</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.layer.BaseMap.is_basic\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Does BaseMap pull from CARTO default basemaps?</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><cite>True</cite> if using a CARTO basemap (Dark Matter, Positron or\nVoyager), <cite>False</cite> otherwise.</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Return type:</th><td class=\"field-body\">bool</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"cartoframes.layer.Layer\">\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">Layer</code><span class=\"sig-paren\">(</span><em>table_name</em>, <em>source=None</em>, <em>overwrite=False</em>, <em>time=None</em>, <em>color=None</em>, <em>size=None</em>, <em>tooltip=None</em>, <em>legend=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.layer.Layer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#cartoframes.layer.QueryLayer\" title=\"cartoframes.layer.QueryLayer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cartoframes.layer.QueryLayer</span></code></a></p>\n<p>A cartoframes Data Layer based on a specific table in user\u2019s CARTO\ndatabase. This layer class is used for visualizing individual datasets\nwith <a class=\"reference external\" href=\"#context.CartoContext.map\">CartoContext.map</a>\u2019s <cite>layers</cite>\nkeyword argument.</p>\n<p class=\"rubric\">Example</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;fantastic_sql_table&#39;</span><span class=\"p\">,</span>\n                     <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n                     <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mr_fox_sightings&#39;</span><span class=\"p\">,</span>\n                            <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">prism</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)})])</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>table_name</strong> (<em>str</em>) \u2013 Name of table in CARTO account</li>\n<li><strong>Styling</strong> \u2013 See <a class=\"reference internal\" href=\"#cartoframes.layer.QueryLayer\" title=\"cartoframes.layer.QueryLayer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QueryLayer</span></code></a> for a full list of all arguments\narguments for styling this map data layer.</li>\n<li><strong>source</strong> (<em>pandas.DataFrame</em><em>, </em><em>optional</em>) \u2013 Not currently implemented</li>\n<li><strong>overwrite</strong> (<em>bool</em><em>, </em><em>optional</em>) \u2013 Not currently implemented</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"cartoframes.layer.QueryLayer\">\n<em class=\"property\">class </em><code class=\"descclassname\">cartoframes.layer.</code><code class=\"descname\">QueryLayer</code><span class=\"sig-paren\">(</span><em>query</em>, <em>time=None</em>, <em>color=None</em>, <em>size=None</em>, <em>tooltip=None</em>, <em>legend=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#cartoframes.layer.QueryLayer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#cartoframes.layer.AbstractLayer\" title=\"cartoframes.layer.AbstractLayer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cartoframes.layer.AbstractLayer</span></code></a></p>\n<p>cartoframes data layer based on an arbitrary query to the user\u2019s CARTO\ndatabase. This layer class is useful for offloading processing to the cloud\nto do some of the following:</p>\n<ul class=\"simple\">\n<li>Visualizing spatial operations using <a class=\"reference external\" href=\"http://postgis.net/\">PostGIS</a>\nand <a class=\"reference external\" href=\"https://www.postgresql.org/\">PostgreSQL</a>, which is the database\nunderlying CARTO</li>\n<li>Performing arbitrary relational database queries (e.g., complex JOINs\nin SQL instead of in pandas)</li>\n<li>Visualizing a subset of the data (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">*</span> <span class=\"pre\">FROM</span> <span class=\"pre\">table</span> <span class=\"pre\">LIMIT</span>\n<span class=\"pre\">1000</span></code>)</li>\n</ul>\n<p>Used in the <cite>layers</cite> keyword in <a class=\"reference external\" href=\"#context.CartoContext.map\">CartoContext.map</a>.</p>\n<p class=\"rubric\">Example</p>\n<p>Underlay a QueryLayer with a complex query below a layer from a table.\nThe QueryLayer is colored by the calculated column <code class=\"docutils literal notranslate\"><span class=\"pre\">abs_diff</span></code>, and\npoints are sized by the column <code class=\"docutils literal notranslate\"><span class=\"pre\">i_measure</span></code>.</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">cartoframes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">cartoframes</span><span class=\"o\">.</span><span class=\"n\">CartoContext</span><span class=\"p\">(</span><span class=\"n\">BASEURL</span><span class=\"p\">,</span> <span class=\"n\">APIKEY</span><span class=\"p\">)</span>\n<span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">                          WITH i_cte As (</span>\n<span class=\"s1\">                            SELECT</span>\n<span class=\"s1\">                                ST_Buffer(the_geom::geography, 500)::geometry As the_geom,</span>\n<span class=\"s1\">                                cartodb_id,</span>\n<span class=\"s1\">                                measure,</span>\n<span class=\"s1\">                                date</span>\n<span class=\"s1\">                              FROM interesting_data</span>\n<span class=\"s1\">                             WHERE date &gt; &#39;2017-04-19&#39;</span>\n<span class=\"s1\">                          )</span>\n<span class=\"s1\">                          SELECT</span>\n<span class=\"s1\">                             i.cartodb_id, i.the_geom,</span>\n<span class=\"s1\">                             ST_Transform(i.the_geom, 3857) AS the_geom_webmercator,</span>\n<span class=\"s1\">                             abs(i.measure - j.measure) AS abs_diff,</span>\n<span class=\"s1\">                             i.measure AS i_measure</span>\n<span class=\"s1\">                            FROM i_cte AS i</span>\n<span class=\"s1\">                            JOIN awesome_data AS j</span>\n<span class=\"s1\">                              ON i.event_id = j.event_id</span>\n<span class=\"s1\">                           WHERE j.measure IS NOT NULL</span>\n<span class=\"s1\">                             AND j.date &lt; &#39;2017-04-29&#39;</span>\n<span class=\"s1\">                          &#39;&#39;&#39;</span><span class=\"p\">,</span>\n                          <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;abs_diff&#39;</span><span class=\"p\">,</span>\n                                 <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">sunsetDark</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)},</span>\n                          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;i_measure&#39;</span><span class=\"p\">),</span>\n               <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;fantastic_sql_table&#39;</span><span class=\"p\">)])</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\">\n<li><strong>query</strong> (<em>str</em>) \u2013 Query to expose data on a map layer. At a minimum, a\nquery needs to have the columns <cite>cartodb_id</cite>, <cite>the_geom</cite>, and\n<cite>the_geom_webmercator</cite> for the map to display. Read more about\nqueries in <a class=\"reference external\" href=\"https://carto.com/docs/tips-and-tricks/geospatial-analysis\">CARTO\u2019s docs</a>.</li>\n<li><strong>time</strong> (<em>dict</em><em> or </em><em>str</em><em>, </em><em>optional</em>) \u2013 <p>Time-based style to apply to layer.</p>\n<p>If <cite>time</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">str</span></code>, it must be the name of a column which\nhas a data type of <cite>datetime</cite> or <cite>float</cite>.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;SELECT * FROM acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">&#39;bird_sighting_time&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>time</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code>, the following keys are options:</p>\n<ul>\n<li>column (<cite>str</cite>, required): Column for animating map, which must\nbe of type <cite>datetime</cite> or <cite>float</cite>.</li>\n<li>method (<cite>str</cite>, optional): Type of aggregation method for\noperating on <a class=\"reference external\" href=\"https://github.com/CartoDB/torque\">Torque TileCubes</a>. Must be one of <code class=\"docutils literal notranslate\"><span class=\"pre\">avg</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sum</span></code>, or another <a class=\"reference external\" href=\"https://www.postgresql.org/docs/9.5/static/functions-aggregate.html\">PostgreSQL aggregate functions</a>\nwith a numeric output. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code>.</li>\n<li>cumulative (<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bool</span></code>, optional): Whether to accumulate points over\ntime (<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>) or not (<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, default)</li>\n<li>frames (<cite>int</cite>, optional): Number of frames in the animation.\nDefaults to 256.</li>\n<li>duration (<cite>int</cite>, optional): Number of seconds in the animation.\nDefaults to 30.</li>\n<li>trails (<cite>int</cite>, optional): Number of trails after the incidence of\na point. Defaults to 2.</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bird_sighting_time&#39;</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;cumulative&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;frames&#39;</span><span class=\"p\">:</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;duration&#39;</span><span class=\"p\">:</span> <span class=\"mi\">15</span>\n          <span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><strong>color</strong> (<em>dict</em><em> or </em><em>str</em><em>, </em><em>optional</em>) \u2013 <p>Color style to apply to map. For\nexample, this can be used to change the color of all geometries\nin this layer, or to create a graduated color or choropleth map.</p>\n<p>If <cite>color</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">str</span></code>, there are two options:</p>\n<ul>\n<li>A column name to style by to create, for example, a choropleth\nmap if working with polygons. The default classification is\n<cite>quantiles</cite> for quantitative data and <cite>category</cite> for\nqualitative data.</li>\n<li>A hex value or <a class=\"reference external\" href=\"https://www.w3.org/TR/css3-color/#svg-color\">web color name</a>.</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># color all geometries red (#F00)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># color on &#39;num_eggs&#39; (using defalt color scheme and quantification)</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>color</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code>, the following keys are options, with\nvalues described:</p>\n<ul>\n<li>column (<cite>str</cite>): Column used for the basis of styling</li>\n<li>scheme (<cite>dict</cite>, optional): Scheme such as <cite>styling.sunset(7)</cite>\nfrom the <a class=\"reference external\" href=\"#module-styling\">styling module</a> of cartoframes that\nexposes <a class=\"reference external\" href=\"https://github.com/CartoDB/CartoColor/wiki/CARTOColor-Scheme-Names\">CARTOColors</a>.\nDefaults to <a class=\"reference external\" href=\"#styling.mint\">mint</a> scheme for quantitative\ndata and <cite>bold</cite> for qualitative data. More control is given by\nusing <a class=\"reference external\" href=\"#styling.scheme\">styling.scheme</a>.<p>If you wish to define a custom scheme outside of CARTOColors, it\nis recommended to use the <a class=\"reference external\" href=\"#styling.custom\">styling.custom</a>\nutility function.</p>\n</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span><span class=\"p\">,</span> <span class=\"n\">styling</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;SELECT * FROM acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                   <span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;simpson_index&#39;</span><span class=\"p\">,</span>\n                   <span class=\"s1\">&#39;scheme&#39;</span><span class=\"p\">:</span> <span class=\"n\">styling</span><span class=\"o\">.</span><span class=\"n\">mint</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">bin_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;equal&#39;</span><span class=\"p\">)</span>\n               <span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><strong>size</strong> (<em>dict</em><em> or </em><em>int</em><em>, </em><em>optional</em>) \u2013 <p>Size style to apply to point data.</p>\n<p>If <cite>size</cite> is an <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">int</span></code>, all points are sized by this value.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">QueryLayer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">QueryLayer</span><span class=\"p\">(</span><span class=\"s1\">&#39;SELECT * FROM acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n               <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>size</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">str</span></code>, this value is interpreted as a column,\nand the points are sized by the value in this column. The\nclassification method defaults to <cite>quantiles</cite>, with a min size of\n5, and a max size of 5. Use the <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code> input to override these\nvalues.</p>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <cite>size</cite> is a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code>, the follow keys are options, with\nvalues described as:</p>\n<ul>\n<li>column (<cite>str</cite>): Column to base sizing of points on</li>\n<li>bin_method (<cite>str</cite>, optional): Quantification method for dividing\ndata range into bins. Must be one of the methods in\n<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BinMethod</span></code> (excluding <cite>category</cite>).</li>\n<li>bins (<cite>int</cite>, optional): Number of bins to break data into.\nDefaults to 5.</li>\n<li>max (<cite>int</cite>, optional): Maximum point width (in pixels). Defaults\nto 25.</li>\n<li>min (<cite>int</cite>, optional): Minimum point width (in pixels). Defaults\nto 5.</li>\n</ul>\n<div class=\"code highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes</span> <span class=\"k\">import</span> <span class=\"n\">Layer</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">&#39;acadia_biodiversity&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s1\">&#39;column&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;num_eggs&#39;</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;max&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;min&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n          <span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><strong>tooltip</strong> (<em>tuple</em><em>, </em><em>optional</em>) \u2013 <strong>Not yet implemented.</strong></li>\n<li><strong>legend</strong> \u2013 <strong>Not yet implemented.</strong></li>\n</ul>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Raises:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CartoException</span></code> \u2013 If a column name used in any of the styling options is\nnot in the data source in <cite>query</cite> (or <cite>table</cite> if using <a class=\"reference internal\" href=\"#cartoframes.layer.Layer\" title=\"cartoframes.layer.Layer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a>).</li>\n<li><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> \u2013 If styling using a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dict</span></code> and a <code class=\"docutils literal notranslate\"><span class=\"pre\">column</span></code> key is not\npresent, or if the data type for a styling option is not supported.\nThis is also raised if styling by a geometry column (i.e.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">the_geom</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">the_geom_webmercator</span></code>). Futher, this is raised if\nrequesting a time-based map with a data source that has geometries\nother than points.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "cartoframes.layer.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">cartoframes.layer module</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "cartoframes.layer", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.10"}